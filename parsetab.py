
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSAND BOOLEAN ELIF ELSE EQUAL FLOATDEC FNUMBER GOEQUAL GT IF INTDEC INUMBER LOEQUAL LPAREN LT NAME NOTEQUAL OR PRINT RPAREN STRINGs : segment\n        | segment ssegment : conditional\n            | statementstatement : BOOLEAN NAME is_assignstatement : STRING NAME is_assignstatement : INTDEC NAME is_assign\n    statement : FLOATDEC NAME is_assignis_assign : "=" expression\n                | statement : PRINT \'(\' expression \')\' statement : NAME "=" expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression GOEQUAL expression\n                  | expression LOEQUAL expression\n                  | expression AND expression\n                  | expression OR expression\n                  logic_expression : expression LT expression\n                  | expression GT expression\n                  | expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression GOEQUAL expression\n                  | expression LOEQUAL expression\n                  | expression AND expression\n                  | expression OR expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBER\n                | FNUMBER\n                | BOOLEAN expression : STRING expression : NAME conditional : IF \'(\' logic_expression \')\' \'{\' s \'}\' elif else elif : ELIF \'(\' logic_expression \')\' \'{\' s \'}\' else\n        | else : ELSE \'{\' s \'}\' \n        | '
    
_lr_action_items = {'IF':([0,2,3,4,14,16,17,18,24,25,26,27,28,29,31,32,33,34,51,52,61,62,63,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,92,96,97,99,100,],[5,5,-3,-4,-10,-10,-10,-10,-36,-37,-38,-39,-40,-5,-12,-6,-7,-8,-34,-9,-11,-35,5,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-43,-45,-41,5,-44,5,-45,-42,]),'BOOLEAN':([0,2,3,4,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,92,96,97,99,100,],[6,6,-3,-4,26,-10,26,-10,-10,-10,26,26,26,-36,-37,-38,-39,-40,-5,26,-12,-6,-7,-8,26,26,26,26,26,26,26,26,26,26,26,26,26,-34,-9,26,26,26,26,26,26,26,26,-11,-35,6,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-43,-45,-41,26,6,-44,6,-45,-42,]),'STRING':([0,2,3,4,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,92,96,97,99,100,],[8,8,-3,-4,27,-10,27,-10,-10,-10,27,27,27,-36,-37,-38,-39,-40,-5,27,-12,-6,-7,-8,27,27,27,27,27,27,27,27,27,27,27,27,27,-34,-9,27,27,27,27,27,27,27,27,-11,-35,8,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-43,-45,-41,27,8,-44,8,-45,-42,]),'INTDEC':([0,2,3,4,14,16,17,18,24,25,26,27,28,29,31,32,33,34,51,52,61,62,63,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,92,96,97,99,100,],[9,9,-3,-4,-10,-10,-10,-10,-36,-37,-38,-39,-40,-5,-12,-6,-7,-8,-34,-9,-11,-35,9,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-43,-45,-41,9,-44,9,-45,-42,]),'FLOATDEC':([0,2,3,4,14,16,17,18,24,25,26,27,28,29,31,32,33,34,51,52,61,62,63,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,92,96,97,99,100,],[10,10,-3,-4,-10,-10,-10,-10,-36,-37,-38,-39,-40,-5,-12,-6,-7,-8,-34,-9,-11,-35,10,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-43,-45,-41,10,-44,10,-45,-42,]),'PRINT':([0,2,3,4,14,16,17,18,24,25,26,27,28,29,31,32,33,34,51,52,61,62,63,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,92,96,97,99,100,],[11,11,-3,-4,-10,-10,-10,-10,-36,-37,-38,-39,-40,-5,-12,-6,-7,-8,-34,-9,-11,-35,11,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-43,-45,-41,11,-44,11,-45,-42,]),'NAME':([0,2,3,4,6,8,9,10,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,91,92,96,97,99,100,],[7,7,-3,-4,14,16,17,18,28,-10,28,-10,-10,-10,28,28,28,-36,-37,-38,-39,-40,-5,28,-12,-6,-7,-8,28,28,28,28,28,28,28,28,28,28,28,28,28,-34,-9,28,28,28,28,28,28,28,28,-11,-35,7,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-43,-45,-41,28,7,-44,7,-45,-42,]),'$end':([1,2,3,4,12,14,16,17,18,24,25,26,27,28,29,31,32,33,34,51,52,61,62,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,89,96,99,100,],[0,-1,-3,-4,-2,-10,-10,-10,-10,-36,-37,-38,-39,-40,-5,-12,-6,-7,-8,-34,-9,-11,-35,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-43,-45,-41,-44,-45,-42,]),'}':([2,3,4,12,14,16,17,18,24,25,26,27,28,29,31,32,33,34,51,52,61,62,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,94,96,98,99,100,],[-1,-3,-4,-2,-10,-10,-10,-10,-36,-37,-38,-39,-40,-5,-12,-6,-7,-8,-34,-9,-11,-35,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,86,-43,-45,-41,96,-44,99,-45,-42,]),'(':([5,11,13,15,19,20,23,30,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,88,91,],[13,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,91,20,]),'=':([7,14,16,17,18,],[15,30,30,30,30,]),'-':([13,15,19,20,22,23,24,25,26,27,28,30,31,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,],[23,23,23,23,47,23,-36,-37,-38,-39,-40,23,47,47,47,23,23,23,23,23,23,23,23,23,23,23,23,23,-34,47,23,23,23,23,23,23,23,23,-35,47,47,47,47,47,47,47,47,-13,-14,-15,-16,47,47,47,47,47,47,47,47,47,23,]),'INUMBER':([13,15,19,20,23,30,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,91,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'FNUMBER':([13,15,19,20,23,30,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,91,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),')':([21,24,25,26,27,28,35,36,51,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,93,],[37,-36,-37,-38,-39,-40,61,62,-34,-35,-26,-27,-28,-29,-30,-31,-32,-33,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,95,]),'LT':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[38,-36,-37,-38,-39,-40,53,53,53,-34,53,-35,53,53,53,53,53,53,53,53,-13,-14,-15,-16,53,53,53,53,53,53,53,53,53,]),'GT':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[39,-36,-37,-38,-39,-40,54,54,54,-34,54,-35,54,54,54,54,54,54,54,54,-13,-14,-15,-16,54,54,54,54,54,54,54,54,54,]),'EQUAL':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[40,-36,-37,-38,-39,-40,55,55,55,-34,55,-35,55,55,55,55,55,55,55,55,-13,-14,-15,-16,55,55,55,55,55,55,55,55,55,]),'NOTEQUAL':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[41,-36,-37,-38,-39,-40,56,56,56,-34,56,-35,56,56,56,56,56,56,56,56,-13,-14,-15,-16,56,56,56,56,56,56,56,56,56,]),'GOEQUAL':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[42,-36,-37,-38,-39,-40,57,57,57,-34,57,-35,57,57,57,57,57,57,57,57,-13,-14,-15,-16,57,57,57,57,57,57,57,57,57,]),'LOEQUAL':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[43,-36,-37,-38,-39,-40,58,58,58,-34,58,-35,58,58,58,58,58,58,58,58,-13,-14,-15,-16,58,58,58,58,58,58,58,58,58,]),'AND':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[44,-36,-37,-38,-39,-40,59,59,59,-34,59,-35,59,59,59,59,59,59,59,59,-13,-14,-15,-16,59,59,59,59,59,59,59,59,59,]),'OR':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[45,-36,-37,-38,-39,-40,60,60,60,-34,60,-35,60,60,60,60,60,60,60,60,-13,-14,-15,-16,60,60,60,60,60,60,60,60,60,]),'+':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[46,-36,-37,-38,-39,-40,46,46,46,-34,46,-35,46,46,46,46,46,46,46,46,-13,-14,-15,-16,46,46,46,46,46,46,46,46,46,]),'*':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[48,-36,-37,-38,-39,-40,48,48,48,-34,48,-35,48,48,48,48,48,48,48,48,48,48,-15,-16,48,48,48,48,48,48,48,48,48,]),'/':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[49,-36,-37,-38,-39,-40,49,49,49,-34,49,-35,49,49,49,49,49,49,49,49,49,49,-15,-16,49,49,49,49,49,49,49,49,49,]),'^':([22,24,25,26,27,28,31,35,36,51,52,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,],[50,-36,-37,-38,-39,-40,50,50,50,-34,50,-35,50,50,50,50,50,50,50,50,-13,-14,-15,-16,50,50,50,50,50,50,50,50,50,]),'{':([37,90,95,],[63,92,97,]),'ELIF':([86,],[88,]),'ELSE':([86,87,96,99,100,],[-43,90,-44,90,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s':([0,2,63,92,97,],[1,12,85,94,98,]),'segment':([0,2,63,92,97,],[2,2,2,2,2,]),'conditional':([0,2,63,92,97,],[3,3,3,3,3,]),'statement':([0,2,63,92,97,],[4,4,4,4,4,]),'logic_expression':([13,91,],[21,93,]),'expression':([13,15,19,20,23,30,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,91,],[22,31,35,36,51,52,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,22,]),'is_assign':([14,16,17,18,],[29,32,33,34,]),'elif':([86,],[87,]),'else':([87,99,],[89,100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s","S'",1,None,None,None),
  ('s -> segment','s',1,'p_start','main.py',102),
  ('s -> segment s','s',2,'p_start','main.py',103),
  ('segment -> conditional','segment',1,'p_segment','main.py',108),
  ('segment -> statement','segment',1,'p_segment','main.py',109),
  ('statement -> BOOLEAN NAME is_assign','statement',3,'p_statement_declare_bool','main.py',114),
  ('statement -> STRING NAME is_assign','statement',3,'p_statement_declare_str','main.py',121),
  ('statement -> INTDEC NAME is_assign','statement',3,'p_statement_declare_int','main.py',127),
  ('statement -> FLOATDEC NAME is_assign','statement',3,'p_statement_declare_float','main.py',136),
  ('is_assign -> = expression','is_assign',2,'p_is_assign','main.py',141),
  ('is_assign -> <empty>','is_assign',0,'p_is_assign','main.py',142),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','main.py',150),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','main.py',154),
  ('expression -> expression + expression','expression',3,'p_expression_binop_comparison','main.py',161),
  ('expression -> expression - expression','expression',3,'p_expression_binop_comparison','main.py',162),
  ('expression -> expression * expression','expression',3,'p_expression_binop_comparison','main.py',163),
  ('expression -> expression / expression','expression',3,'p_expression_binop_comparison','main.py',164),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop_comparison','main.py',165),
  ('expression -> expression LT expression','expression',3,'p_expression_binop_comparison','main.py',166),
  ('expression -> expression GT expression','expression',3,'p_expression_binop_comparison','main.py',167),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop_comparison','main.py',168),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binop_comparison','main.py',169),
  ('expression -> expression GOEQUAL expression','expression',3,'p_expression_binop_comparison','main.py',170),
  ('expression -> expression LOEQUAL expression','expression',3,'p_expression_binop_comparison','main.py',171),
  ('expression -> expression AND expression','expression',3,'p_expression_binop_comparison','main.py',172),
  ('expression -> expression OR expression','expression',3,'p_expression_binop_comparison','main.py',173),
  ('logic_expression -> expression LT expression','logic_expression',3,'p_logic_expressions','main.py',286),
  ('logic_expression -> expression GT expression','logic_expression',3,'p_logic_expressions','main.py',287),
  ('logic_expression -> expression EQUAL expression','logic_expression',3,'p_logic_expressions','main.py',288),
  ('logic_expression -> expression NOTEQUAL expression','logic_expression',3,'p_logic_expressions','main.py',289),
  ('logic_expression -> expression GOEQUAL expression','logic_expression',3,'p_logic_expressions','main.py',290),
  ('logic_expression -> expression LOEQUAL expression','logic_expression',3,'p_logic_expressions','main.py',291),
  ('logic_expression -> expression AND expression','logic_expression',3,'p_logic_expressions','main.py',292),
  ('logic_expression -> expression OR expression','logic_expression',3,'p_logic_expressions','main.py',293),
  ('expression -> - expression','expression',2,'p_expression_uminus','main.py',312),
  ('expression -> ( expression )','expression',3,'p_expression_group','main.py',316),
  ('expression -> INUMBER','expression',1,'p_expression_val','main.py',320),
  ('expression -> FNUMBER','expression',1,'p_expression_val','main.py',321),
  ('expression -> BOOLEAN','expression',1,'p_expression_val','main.py',322),
  ('expression -> STRING','expression',1,'p_expression_string','main.py',326),
  ('expression -> NAME','expression',1,'p_expression_name','main.py',330),
  ('conditional -> IF ( logic_expression ) { s } elif else','conditional',9,'p_if','main.py',339),
  ('elif -> ELIF ( logic_expression ) { s } else','elif',8,'p_elif','main.py',348),
  ('elif -> <empty>','elif',0,'p_elif','main.py',349),
  ('else -> ELSE { s }','else',4,'p_else','main.py',359),
  ('else -> <empty>','else',0,'p_else','main.py',360),
]
