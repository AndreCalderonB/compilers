
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left*/left+-left^nonassoc<>GOEQUALLOEQUALleftANDORrightUMINUSAND BOOLEAN ELIF ELSE EQUAL FALSE FLOATDEC FNUMBER GOEQUAL IF INTDEC INUMBER LOEQUAL NAME NOTEQUAL OR PRINT TRUEs : segment\n        | segment ssegment : conditional\n            | statementstatement : BOOLEAN NAME is_assignstatement : INTDEC NAME is_assign\n    statement : FLOATDEC NAME is_assignis_assign : "=" expression\n                | statement : PRINT \'(\' expression \')\' statement : NAME "=" expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expression\n                  | expression \'<\' expression\n                  | expression \'>\' expression\n                  | expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression AND expression\n                  | expression OR expression\n                  logic_expression : expression \'<\' expression\n                  | expression \'>\' expression\n                  | expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression GOEQUAL expression\n                  | expression LOEQUAL expression\n                  | expression AND expression\n                  | expression OR expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBER\n                | FNUMBER\n                | TRUE\n                | FALSE conditional : IF \'(\' logic_expression \')\' \'{\' s \'}\' elif else elif : ELIF \'(\' logic_expression \')\' \'{\' s \'}\' else\n        | else : ELSE \'{\' s \'}\' \n        | expression : NAME'
    
_lr_action_items = {'IF':([0,2,3,4,13,15,16,22,23,24,25,26,27,29,30,31,48,49,56,57,58,67,68,69,70,71,72,73,74,75,76,77,79,80,82,85,89,90,92,93,],[5,5,-3,-4,-9,-9,-9,-33,-34,-35,-36,-42,-5,-11,-6,-7,-31,-8,-10,-32,5,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-39,-41,-37,5,-40,5,-41,-38,]),'BOOLEAN':([0,2,3,4,13,15,16,22,23,24,25,26,27,29,30,31,48,49,56,57,58,67,68,69,70,71,72,73,74,75,76,77,79,80,82,85,89,90,92,93,],[6,6,-3,-4,-9,-9,-9,-33,-34,-35,-36,-42,-5,-11,-6,-7,-31,-8,-10,-32,6,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-39,-41,-37,6,-40,6,-41,-38,]),'INTDEC':([0,2,3,4,13,15,16,22,23,24,25,26,27,29,30,31,48,49,56,57,58,67,68,69,70,71,72,73,74,75,76,77,79,80,82,85,89,90,92,93,],[8,8,-3,-4,-9,-9,-9,-33,-34,-35,-36,-42,-5,-11,-6,-7,-31,-8,-10,-32,8,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-39,-41,-37,8,-40,8,-41,-38,]),'FLOATDEC':([0,2,3,4,13,15,16,22,23,24,25,26,27,29,30,31,48,49,56,57,58,67,68,69,70,71,72,73,74,75,76,77,79,80,82,85,89,90,92,93,],[9,9,-3,-4,-9,-9,-9,-33,-34,-35,-36,-42,-5,-11,-6,-7,-31,-8,-10,-32,9,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-39,-41,-37,9,-40,9,-41,-38,]),'PRINT':([0,2,3,4,13,15,16,22,23,24,25,26,27,29,30,31,48,49,56,57,58,67,68,69,70,71,72,73,74,75,76,77,79,80,82,85,89,90,92,93,],[10,10,-3,-4,-9,-9,-9,-33,-34,-35,-36,-42,-5,-11,-6,-7,-31,-8,-10,-32,10,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-39,-41,-37,10,-40,10,-41,-38,]),'NAME':([0,2,3,4,6,8,9,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,75,76,77,79,80,82,84,85,89,90,92,93,],[7,7,-3,-4,13,15,16,26,-9,26,-9,-9,26,26,26,-33,-34,-35,-36,-42,-5,26,-11,-6,-7,26,26,26,26,26,26,26,26,26,26,26,26,26,-31,-8,26,26,26,26,26,26,-10,-32,7,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-39,-41,-37,26,7,-40,7,-41,-38,]),'$end':([1,2,3,4,11,13,15,16,22,23,24,25,26,27,29,30,31,48,49,56,57,67,68,69,70,71,72,73,74,75,76,77,79,80,82,89,92,93,],[0,-1,-3,-4,-2,-9,-9,-9,-33,-34,-35,-36,-42,-5,-11,-6,-7,-31,-8,-10,-32,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-39,-41,-37,-40,-41,-38,]),'}':([2,3,4,11,13,15,16,22,23,24,25,26,27,29,30,31,48,49,56,57,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,87,89,91,92,93,],[-1,-3,-4,-2,-9,-9,-9,-33,-34,-35,-36,-42,-5,-11,-6,-7,-31,-8,-10,-32,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,79,-39,-41,-37,89,-40,92,-41,-38,]),'(':([5,10,12,14,17,18,21,28,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,81,84,],[12,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,84,18,]),'=':([7,13,15,16,],[14,28,28,28,]),'-':([12,14,17,18,20,21,22,23,24,25,26,28,29,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,],[21,21,21,21,44,21,-33,-34,-35,-36,-42,21,44,44,44,21,21,21,21,21,21,21,21,21,21,21,21,21,-31,44,21,21,21,21,21,21,-32,-17,-18,44,44,44,44,-21,-22,-12,-13,44,44,-16,-17,-18,44,44,-21,-22,21,]),'INUMBER':([12,14,17,18,21,28,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,84,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'FNUMBER':([12,14,17,18,21,28,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,84,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'TRUE':([12,14,17,18,21,28,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,84,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'FALSE':([12,14,17,18,21,28,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,84,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),')':([19,22,23,24,25,26,32,33,48,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,86,],[34,-33,-34,-35,-36,-42,56,57,-31,-32,-23,-24,-25,-26,-27,-28,-29,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,88,]),'<':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[35,-33,-34,-35,-36,-42,50,50,50,-31,50,-32,None,None,50,50,50,50,-21,-22,50,50,50,50,50,None,None,50,50,-21,-22,]),'>':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[36,-33,-34,-35,-36,-42,51,51,51,-31,51,-32,None,None,51,51,51,51,-21,-22,51,51,51,51,51,None,None,51,51,-21,-22,]),'EQUAL':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[37,-33,-34,-35,-36,-42,52,52,52,-31,52,-32,-17,-18,52,52,52,52,-21,-22,-12,-13,-14,-15,-16,-17,-18,52,52,-21,-22,]),'NOTEQUAL':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[38,-33,-34,-35,-36,-42,53,53,53,-31,53,-32,-17,-18,53,53,53,53,-21,-22,-12,-13,-14,-15,-16,-17,-18,53,53,-21,-22,]),'GOEQUAL':([20,22,23,24,25,26,48,57,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,],[39,-33,-34,-35,-36,-42,-31,-32,-17,-18,-19,-20,-21,-22,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,]),'LOEQUAL':([20,22,23,24,25,26,48,57,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,],[40,-33,-34,-35,-36,-42,-31,-32,-17,-18,-19,-20,-21,-22,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,]),'AND':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[41,-33,-34,-35,-36,-42,54,54,54,-31,54,-32,54,54,54,54,54,54,-21,-22,54,54,54,54,54,54,54,54,54,-21,-22,]),'OR':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[42,-33,-34,-35,-36,-42,55,55,55,-31,55,-32,55,55,55,55,55,55,-21,-22,55,55,55,55,55,55,55,55,55,-21,-22,]),'+':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[43,-33,-34,-35,-36,-42,43,43,43,-31,43,-32,-17,-18,43,43,43,43,-21,-22,-12,-13,43,43,-16,-17,-18,43,43,-21,-22,]),'*':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[45,-33,-34,-35,-36,-42,45,45,45,-31,45,-32,-17,-18,45,45,45,45,-21,-22,-12,-13,-14,-15,-16,-17,-18,45,45,-21,-22,]),'/':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[46,-33,-34,-35,-36,-42,46,46,46,-31,46,-32,-17,-18,46,46,46,46,-21,-22,-12,-13,-14,-15,-16,-17,-18,46,46,-21,-22,]),'^':([20,22,23,24,25,26,29,32,33,48,49,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[47,-33,-34,-35,-36,-42,47,47,47,-31,47,-32,-17,-18,47,47,47,47,-21,-22,47,47,47,47,-16,-17,-18,47,47,-21,-22,]),'{':([34,83,88,],[58,85,90,]),'ELIF':([79,],[81,]),'ELSE':([79,80,89,92,93,],[-39,83,-40,83,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s':([0,2,58,85,90,],[1,11,78,87,91,]),'segment':([0,2,58,85,90,],[2,2,2,2,2,]),'conditional':([0,2,58,85,90,],[3,3,3,3,3,]),'statement':([0,2,58,85,90,],[4,4,4,4,4,]),'logic_expression':([12,84,],[19,86,]),'expression':([12,14,17,18,21,28,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,84,],[20,29,32,33,48,49,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,20,]),'is_assign':([13,15,16,],[27,30,31,]),'elif':([79,],[80,]),'else':([80,92,],[82,93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s","S'",1,None,None,None),
  ('s -> segment','s',1,'p_start','main.py',88),
  ('s -> segment s','s',2,'p_start','main.py',89),
  ('segment -> conditional','segment',1,'p_segment','main.py',92),
  ('segment -> statement','segment',1,'p_segment','main.py',93),
  ('statement -> BOOLEAN NAME is_assign','statement',3,'p_statement_declare_bool','main.py',97),
  ('statement -> INTDEC NAME is_assign','statement',3,'p_statement_declare_int','main.py',101),
  ('statement -> FLOATDEC NAME is_assign','statement',3,'p_statement_declare_float','main.py',108),
  ('is_assign -> = expression','is_assign',2,'p_is_assign','main.py',112),
  ('is_assign -> <empty>','is_assign',0,'p_is_assign','main.py',113),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','main.py',120),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','main.py',124),
  ('expression -> expression + expression','expression',3,'p_expression_binop','main.py',131),
  ('expression -> expression - expression','expression',3,'p_expression_binop','main.py',132),
  ('expression -> expression * expression','expression',3,'p_expression_binop','main.py',133),
  ('expression -> expression / expression','expression',3,'p_expression_binop','main.py',134),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','main.py',135),
  ('expression -> expression < expression','expression',3,'p_expression_binop','main.py',136),
  ('expression -> expression > expression','expression',3,'p_expression_binop','main.py',137),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','main.py',138),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binop','main.py',139),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','main.py',140),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','main.py',141),
  ('logic_expression -> expression < expression','logic_expression',3,'p_logic_expressions','main.py',165),
  ('logic_expression -> expression > expression','logic_expression',3,'p_logic_expressions','main.py',166),
  ('logic_expression -> expression EQUAL expression','logic_expression',3,'p_logic_expressions','main.py',167),
  ('logic_expression -> expression NOTEQUAL expression','logic_expression',3,'p_logic_expressions','main.py',168),
  ('logic_expression -> expression GOEQUAL expression','logic_expression',3,'p_logic_expressions','main.py',169),
  ('logic_expression -> expression LOEQUAL expression','logic_expression',3,'p_logic_expressions','main.py',170),
  ('logic_expression -> expression AND expression','logic_expression',3,'p_logic_expressions','main.py',171),
  ('logic_expression -> expression OR expression','logic_expression',3,'p_logic_expressions','main.py',172),
  ('expression -> - expression','expression',2,'p_expression_uminus','main.py',191),
  ('expression -> ( expression )','expression',3,'p_expression_group','main.py',195),
  ('expression -> INUMBER','expression',1,'p_expression_val','main.py',200),
  ('expression -> FNUMBER','expression',1,'p_expression_val','main.py',201),
  ('expression -> TRUE','expression',1,'p_expression_val','main.py',202),
  ('expression -> FALSE','expression',1,'p_expression_val','main.py',203),
  ('conditional -> IF ( logic_expression ) { s } elif else','conditional',9,'p_if','main.py',209),
  ('elif -> ELIF ( logic_expression ) { s } else','elif',8,'p_elif','main.py',215),
  ('elif -> <empty>','elif',0,'p_elif','main.py',216),
  ('else -> ELSE { s }','else',4,'p_else','main.py',219),
  ('else -> <empty>','else',0,'p_else','main.py',220),
  ('expression -> NAME','expression',1,'p_expression_name','main.py',227),
]
