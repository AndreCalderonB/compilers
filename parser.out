Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> s
Rule 1     s -> segment
Rule 2     segment -> while segment
Rule 3     segment -> for segment
Rule 4     segment -> conditional segment
Rule 5     segment -> statement ; segment
Rule 6     segment -> declaration ; segment
Rule 7     segment -> <empty>
Rule 8     declaration -> declareWithVal
Rule 9     declaration -> declareVar
Rule 10    declaration -> assign
Rule 11    declareWithVal -> dataType NAME = expression
Rule 12    declareVar -> dataType NAME
Rule 13    assign -> NAME = expression
Rule 14    dataType -> INTDEC
Rule 15    dataType -> FLOATDEC
Rule 16    dataType -> BOOLEAN
Rule 17    dataType -> STRING
Rule 18    statement -> PRINT ( expression )
Rule 19    expression -> expression + expression
Rule 20    expression -> expression - expression
Rule 21    expression -> expression * expression
Rule 22    expression -> expression / expression
Rule 23    expression -> expression ^ expression
Rule 24    expression -> expression LT expression
Rule 25    expression -> expression GT expression
Rule 26    expression -> expression EQUAL expression
Rule 27    expression -> expression NOTEQUAL expression
Rule 28    expression -> expression GOEQUAL expression
Rule 29    expression -> expression LOEQUAL expression
Rule 30    expression -> expression AND expression
Rule 31    expression -> expression OR expression
Rule 32    expression -> - expression
Rule 33    expression -> ( expression )
Rule 34    expression -> INUMBER
Rule 35    expression -> FNUMBER
Rule 36    expression -> BOOLEAN
Rule 37    expression -> STRING_V
Rule 38    expression -> NAME
Rule 39    conditional -> IF ( expression ) { segment } elif else
Rule 40    elif -> ELIF ( expression ) { segment } elif
Rule 41    elif -> <empty>
Rule 42    else -> ELSE { segment }
Rule 43    else -> <empty>
Rule 44    for -> FOR ( declareWithVal ; expression ; assign ) { segment }
Rule 45    while -> WHILE ( expression ) { segment }

Terminals, with rules where they appear

(                    : 18 33 39 40 44 45
)                    : 18 33 39 40 44 45
*                    : 21
+                    : 19
-                    : 20 32
/                    : 22
;                    : 5 6 44 44
=                    : 11 13
AND                  : 30
BOOLEAN              : 16 36
ELIF                 : 40
ELSE                 : 42
EQUAL                : 26
FLOATDEC             : 15
FNUMBER              : 35
FOR                  : 44
GOEQUAL              : 28
GT                   : 25
IF                   : 39
INTDEC               : 14
INUMBER              : 34
LOEQUAL              : 29
LT                   : 24
NAME                 : 11 12 13 38
NOTEQUAL             : 27
OR                   : 31
PRINT                : 18
STRING               : 17
STRING_V             : 37
WHILE                : 45
^                    : 23
error                : 
{                    : 39 40 42 44 45
}                    : 39 40 42 44 45

Nonterminals, with rules where they appear

assign               : 10 44
conditional          : 4
dataType             : 11 12
declaration          : 6
declareVar           : 9
declareWithVal       : 8 44
elif                 : 39 40
else                 : 39
expression           : 11 13 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 33 39 40 44 45
for                  : 3
s                    : 0
segment              : 1 2 3 4 5 6 39 40 42 44 45
statement            : 5
while                : 2

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . segment
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    $end            reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    s                              shift and go to state 1
    segment                        shift and go to state 2
    while                          shift and go to state 3
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 1

    (0) S' -> s .



state 2

    (1) s -> segment .

    $end            reduce using rule 1 (s -> segment .)


state 3

    (2) segment -> while . segment
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    $end            reduce using rule 7 (segment -> .)
    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    while                          shift and go to state 3
    segment                        shift and go to state 21
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 4

    (3) segment -> for . segment
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    $end            reduce using rule 7 (segment -> .)
    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    for                            shift and go to state 4
    segment                        shift and go to state 22
    while                          shift and go to state 3
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 5

    (4) segment -> conditional . segment
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    $end            reduce using rule 7 (segment -> .)
    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    conditional                    shift and go to state 5
    segment                        shift and go to state 23
    while                          shift and go to state 3
    for                            shift and go to state 4
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 6

    (5) segment -> statement . ; segment

    ;               shift and go to state 24


state 7

    (6) segment -> declaration . ; segment

    ;               shift and go to state 25


state 8

    (45) while -> WHILE . ( expression ) { segment }

    (               shift and go to state 26


state 9

    (44) for -> FOR . ( declareWithVal ; expression ; assign ) { segment }

    (               shift and go to state 27


state 10

    (8) declaration -> declareWithVal .

    ;               reduce using rule 8 (declaration -> declareWithVal .)


state 11

    (10) declaration -> assign .

    ;               reduce using rule 10 (declaration -> assign .)


state 12

    (39) conditional -> IF . ( expression ) { segment } elif else

    (               shift and go to state 28


state 13

    (18) statement -> PRINT . ( expression )

    (               shift and go to state 29


state 14

    (9) declaration -> declareVar .

    ;               reduce using rule 9 (declaration -> declareVar .)


state 15

    (11) declareWithVal -> dataType . NAME = expression
    (12) declareVar -> dataType . NAME

    NAME            shift and go to state 30


state 16

    (13) assign -> NAME . = expression

    =               shift and go to state 31


state 17

    (14) dataType -> INTDEC .

    NAME            reduce using rule 14 (dataType -> INTDEC .)


state 18

    (15) dataType -> FLOATDEC .

    NAME            reduce using rule 15 (dataType -> FLOATDEC .)


state 19

    (16) dataType -> BOOLEAN .

    NAME            reduce using rule 16 (dataType -> BOOLEAN .)


state 20

    (17) dataType -> STRING .

    NAME            reduce using rule 17 (dataType -> STRING .)


state 21

    (2) segment -> while segment .

    $end            reduce using rule 2 (segment -> while segment .)
    }               reduce using rule 2 (segment -> while segment .)


state 22

    (3) segment -> for segment .

    $end            reduce using rule 3 (segment -> for segment .)
    }               reduce using rule 3 (segment -> for segment .)


state 23

    (4) segment -> conditional segment .

    $end            reduce using rule 4 (segment -> conditional segment .)
    }               reduce using rule 4 (segment -> conditional segment .)


state 24

    (5) segment -> statement ; . segment
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    $end            reduce using rule 7 (segment -> .)
    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    statement                      shift and go to state 6
    segment                        shift and go to state 32
    while                          shift and go to state 3
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 25

    (6) segment -> declaration ; . segment
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    $end            reduce using rule 7 (segment -> .)
    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    declaration                    shift and go to state 7
    segment                        shift and go to state 33
    while                          shift and go to state 3
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 26

    (45) while -> WHILE ( . expression ) { segment }
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 35

state 27

    (44) for -> FOR ( . declareWithVal ; expression ; assign ) { segment }
    (11) declareWithVal -> . dataType NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    declareWithVal                 shift and go to state 42
    dataType                       shift and go to state 43

state 28

    (39) conditional -> IF ( . expression ) { segment } elif else
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 44

state 29

    (18) statement -> PRINT ( . expression )
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 45

state 30

    (11) declareWithVal -> dataType NAME . = expression
    (12) declareVar -> dataType NAME .

    =               shift and go to state 46
    ;               reduce using rule 12 (declareVar -> dataType NAME .)


state 31

    (13) assign -> NAME = . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 47

state 32

    (5) segment -> statement ; segment .

    $end            reduce using rule 5 (segment -> statement ; segment .)
    }               reduce using rule 5 (segment -> statement ; segment .)


state 33

    (6) segment -> declaration ; segment .

    $end            reduce using rule 6 (segment -> declaration ; segment .)
    }               reduce using rule 6 (segment -> declaration ; segment .)


state 34

    (33) expression -> ( . expression )
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 48

state 35

    (45) while -> WHILE ( expression . ) { segment }
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 36

    (32) expression -> - . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 63

state 37

    (34) expression -> INUMBER .

    )               reduce using rule 34 (expression -> INUMBER .)
    +               reduce using rule 34 (expression -> INUMBER .)
    -               reduce using rule 34 (expression -> INUMBER .)
    *               reduce using rule 34 (expression -> INUMBER .)
    /               reduce using rule 34 (expression -> INUMBER .)
    ^               reduce using rule 34 (expression -> INUMBER .)
    LT              reduce using rule 34 (expression -> INUMBER .)
    GT              reduce using rule 34 (expression -> INUMBER .)
    EQUAL           reduce using rule 34 (expression -> INUMBER .)
    NOTEQUAL        reduce using rule 34 (expression -> INUMBER .)
    GOEQUAL         reduce using rule 34 (expression -> INUMBER .)
    LOEQUAL         reduce using rule 34 (expression -> INUMBER .)
    AND             reduce using rule 34 (expression -> INUMBER .)
    OR              reduce using rule 34 (expression -> INUMBER .)
    ;               reduce using rule 34 (expression -> INUMBER .)


state 38

    (35) expression -> FNUMBER .

    )               reduce using rule 35 (expression -> FNUMBER .)
    +               reduce using rule 35 (expression -> FNUMBER .)
    -               reduce using rule 35 (expression -> FNUMBER .)
    *               reduce using rule 35 (expression -> FNUMBER .)
    /               reduce using rule 35 (expression -> FNUMBER .)
    ^               reduce using rule 35 (expression -> FNUMBER .)
    LT              reduce using rule 35 (expression -> FNUMBER .)
    GT              reduce using rule 35 (expression -> FNUMBER .)
    EQUAL           reduce using rule 35 (expression -> FNUMBER .)
    NOTEQUAL        reduce using rule 35 (expression -> FNUMBER .)
    GOEQUAL         reduce using rule 35 (expression -> FNUMBER .)
    LOEQUAL         reduce using rule 35 (expression -> FNUMBER .)
    AND             reduce using rule 35 (expression -> FNUMBER .)
    OR              reduce using rule 35 (expression -> FNUMBER .)
    ;               reduce using rule 35 (expression -> FNUMBER .)


state 39

    (36) expression -> BOOLEAN .

    )               reduce using rule 36 (expression -> BOOLEAN .)
    +               reduce using rule 36 (expression -> BOOLEAN .)
    -               reduce using rule 36 (expression -> BOOLEAN .)
    *               reduce using rule 36 (expression -> BOOLEAN .)
    /               reduce using rule 36 (expression -> BOOLEAN .)
    ^               reduce using rule 36 (expression -> BOOLEAN .)
    LT              reduce using rule 36 (expression -> BOOLEAN .)
    GT              reduce using rule 36 (expression -> BOOLEAN .)
    EQUAL           reduce using rule 36 (expression -> BOOLEAN .)
    NOTEQUAL        reduce using rule 36 (expression -> BOOLEAN .)
    GOEQUAL         reduce using rule 36 (expression -> BOOLEAN .)
    LOEQUAL         reduce using rule 36 (expression -> BOOLEAN .)
    AND             reduce using rule 36 (expression -> BOOLEAN .)
    OR              reduce using rule 36 (expression -> BOOLEAN .)
    ;               reduce using rule 36 (expression -> BOOLEAN .)


state 40

    (37) expression -> STRING_V .

    )               reduce using rule 37 (expression -> STRING_V .)
    +               reduce using rule 37 (expression -> STRING_V .)
    -               reduce using rule 37 (expression -> STRING_V .)
    *               reduce using rule 37 (expression -> STRING_V .)
    /               reduce using rule 37 (expression -> STRING_V .)
    ^               reduce using rule 37 (expression -> STRING_V .)
    LT              reduce using rule 37 (expression -> STRING_V .)
    GT              reduce using rule 37 (expression -> STRING_V .)
    EQUAL           reduce using rule 37 (expression -> STRING_V .)
    NOTEQUAL        reduce using rule 37 (expression -> STRING_V .)
    GOEQUAL         reduce using rule 37 (expression -> STRING_V .)
    LOEQUAL         reduce using rule 37 (expression -> STRING_V .)
    AND             reduce using rule 37 (expression -> STRING_V .)
    OR              reduce using rule 37 (expression -> STRING_V .)
    ;               reduce using rule 37 (expression -> STRING_V .)


state 41

    (38) expression -> NAME .

    )               reduce using rule 38 (expression -> NAME .)
    +               reduce using rule 38 (expression -> NAME .)
    -               reduce using rule 38 (expression -> NAME .)
    *               reduce using rule 38 (expression -> NAME .)
    /               reduce using rule 38 (expression -> NAME .)
    ^               reduce using rule 38 (expression -> NAME .)
    LT              reduce using rule 38 (expression -> NAME .)
    GT              reduce using rule 38 (expression -> NAME .)
    EQUAL           reduce using rule 38 (expression -> NAME .)
    NOTEQUAL        reduce using rule 38 (expression -> NAME .)
    GOEQUAL         reduce using rule 38 (expression -> NAME .)
    LOEQUAL         reduce using rule 38 (expression -> NAME .)
    AND             reduce using rule 38 (expression -> NAME .)
    OR              reduce using rule 38 (expression -> NAME .)
    ;               reduce using rule 38 (expression -> NAME .)


state 42

    (44) for -> FOR ( declareWithVal . ; expression ; assign ) { segment }

    ;               shift and go to state 64


state 43

    (11) declareWithVal -> dataType . NAME = expression

    NAME            shift and go to state 65


state 44

    (39) conditional -> IF ( expression . ) { segment } elif else
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               shift and go to state 66
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 45

    (18) statement -> PRINT ( expression . )
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               shift and go to state 67
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 46

    (11) declareWithVal -> dataType NAME = . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 68

state 47

    (13) assign -> NAME = expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    ;               reduce using rule 13 (assign -> NAME = expression .)
    )               reduce using rule 13 (assign -> NAME = expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 48

    (33) expression -> ( expression . )
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               shift and go to state 69
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 49

    (45) while -> WHILE ( expression ) . { segment }

    {               shift and go to state 70


state 50

    (19) expression -> expression + . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 71

state 51

    (20) expression -> expression - . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 72

state 52

    (21) expression -> expression * . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 73

state 53

    (22) expression -> expression / . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 74

state 54

    (23) expression -> expression ^ . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 75

state 55

    (24) expression -> expression LT . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 76

state 56

    (25) expression -> expression GT . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 77

state 57

    (26) expression -> expression EQUAL . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 78

state 58

    (27) expression -> expression NOTEQUAL . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 79

state 59

    (28) expression -> expression GOEQUAL . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 80

state 60

    (29) expression -> expression LOEQUAL . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 81

state 61

    (30) expression -> expression AND . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 82

state 62

    (31) expression -> expression OR . expression
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 83

state 63

    (32) expression -> - expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               reduce using rule 32 (expression -> - expression .)
    +               reduce using rule 32 (expression -> - expression .)
    -               reduce using rule 32 (expression -> - expression .)
    *               reduce using rule 32 (expression -> - expression .)
    /               reduce using rule 32 (expression -> - expression .)
    ^               reduce using rule 32 (expression -> - expression .)
    LT              reduce using rule 32 (expression -> - expression .)
    GT              reduce using rule 32 (expression -> - expression .)
    EQUAL           reduce using rule 32 (expression -> - expression .)
    NOTEQUAL        reduce using rule 32 (expression -> - expression .)
    GOEQUAL         reduce using rule 32 (expression -> - expression .)
    LOEQUAL         reduce using rule 32 (expression -> - expression .)
    AND             reduce using rule 32 (expression -> - expression .)
    OR              reduce using rule 32 (expression -> - expression .)
    ;               reduce using rule 32 (expression -> - expression .)

  ! +               [ shift and go to state 50 ]
  ! -               [ shift and go to state 51 ]
  ! *               [ shift and go to state 52 ]
  ! /               [ shift and go to state 53 ]
  ! ^               [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! NOTEQUAL        [ shift and go to state 58 ]
  ! GOEQUAL         [ shift and go to state 59 ]
  ! LOEQUAL         [ shift and go to state 60 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]


state 64

    (44) for -> FOR ( declareWithVal ; . expression ; assign ) { segment }
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 84

state 65

    (11) declareWithVal -> dataType NAME . = expression

    =               shift and go to state 46


state 66

    (39) conditional -> IF ( expression ) . { segment } elif else

    {               shift and go to state 85


state 67

    (18) statement -> PRINT ( expression ) .

    ;               reduce using rule 18 (statement -> PRINT ( expression ) .)


state 68

    (11) declareWithVal -> dataType NAME = expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    ;               reduce using rule 11 (declareWithVal -> dataType NAME = expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 69

    (33) expression -> ( expression ) .

    )               reduce using rule 33 (expression -> ( expression ) .)
    +               reduce using rule 33 (expression -> ( expression ) .)
    -               reduce using rule 33 (expression -> ( expression ) .)
    *               reduce using rule 33 (expression -> ( expression ) .)
    /               reduce using rule 33 (expression -> ( expression ) .)
    ^               reduce using rule 33 (expression -> ( expression ) .)
    LT              reduce using rule 33 (expression -> ( expression ) .)
    GT              reduce using rule 33 (expression -> ( expression ) .)
    EQUAL           reduce using rule 33 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 33 (expression -> ( expression ) .)
    GOEQUAL         reduce using rule 33 (expression -> ( expression ) .)
    LOEQUAL         reduce using rule 33 (expression -> ( expression ) .)
    AND             reduce using rule 33 (expression -> ( expression ) .)
    OR              reduce using rule 33 (expression -> ( expression ) .)
    ;               reduce using rule 33 (expression -> ( expression ) .)


state 70

    (45) while -> WHILE ( expression ) { . segment }
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    segment                        shift and go to state 86
    while                          shift and go to state 3
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 71

    (19) expression -> expression + expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               reduce using rule 19 (expression -> expression + expression .)
    +               reduce using rule 19 (expression -> expression + expression .)
    -               reduce using rule 19 (expression -> expression + expression .)
    ^               reduce using rule 19 (expression -> expression + expression .)
    LT              reduce using rule 19 (expression -> expression + expression .)
    GT              reduce using rule 19 (expression -> expression + expression .)
    EQUAL           reduce using rule 19 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 19 (expression -> expression + expression .)
    GOEQUAL         reduce using rule 19 (expression -> expression + expression .)
    LOEQUAL         reduce using rule 19 (expression -> expression + expression .)
    AND             reduce using rule 19 (expression -> expression + expression .)
    OR              reduce using rule 19 (expression -> expression + expression .)
    ;               reduce using rule 19 (expression -> expression + expression .)
    *               shift and go to state 52
    /               shift and go to state 53

  ! *               [ reduce using rule 19 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 19 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 50 ]
  ! -               [ shift and go to state 51 ]
  ! ^               [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! NOTEQUAL        [ shift and go to state 58 ]
  ! GOEQUAL         [ shift and go to state 59 ]
  ! LOEQUAL         [ shift and go to state 60 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]


state 72

    (20) expression -> expression - expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               reduce using rule 20 (expression -> expression - expression .)
    +               reduce using rule 20 (expression -> expression - expression .)
    -               reduce using rule 20 (expression -> expression - expression .)
    ^               reduce using rule 20 (expression -> expression - expression .)
    LT              reduce using rule 20 (expression -> expression - expression .)
    GT              reduce using rule 20 (expression -> expression - expression .)
    EQUAL           reduce using rule 20 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 20 (expression -> expression - expression .)
    GOEQUAL         reduce using rule 20 (expression -> expression - expression .)
    LOEQUAL         reduce using rule 20 (expression -> expression - expression .)
    AND             reduce using rule 20 (expression -> expression - expression .)
    OR              reduce using rule 20 (expression -> expression - expression .)
    ;               reduce using rule 20 (expression -> expression - expression .)
    *               shift and go to state 52
    /               shift and go to state 53

  ! *               [ reduce using rule 20 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 20 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 50 ]
  ! -               [ shift and go to state 51 ]
  ! ^               [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! NOTEQUAL        [ shift and go to state 58 ]
  ! GOEQUAL         [ shift and go to state 59 ]
  ! LOEQUAL         [ shift and go to state 60 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]


state 73

    (21) expression -> expression * expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               reduce using rule 21 (expression -> expression * expression .)
    +               reduce using rule 21 (expression -> expression * expression .)
    -               reduce using rule 21 (expression -> expression * expression .)
    *               reduce using rule 21 (expression -> expression * expression .)
    /               reduce using rule 21 (expression -> expression * expression .)
    ^               reduce using rule 21 (expression -> expression * expression .)
    LT              reduce using rule 21 (expression -> expression * expression .)
    GT              reduce using rule 21 (expression -> expression * expression .)
    EQUAL           reduce using rule 21 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 21 (expression -> expression * expression .)
    GOEQUAL         reduce using rule 21 (expression -> expression * expression .)
    LOEQUAL         reduce using rule 21 (expression -> expression * expression .)
    AND             reduce using rule 21 (expression -> expression * expression .)
    OR              reduce using rule 21 (expression -> expression * expression .)
    ;               reduce using rule 21 (expression -> expression * expression .)

  ! +               [ shift and go to state 50 ]
  ! -               [ shift and go to state 51 ]
  ! *               [ shift and go to state 52 ]
  ! /               [ shift and go to state 53 ]
  ! ^               [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! NOTEQUAL        [ shift and go to state 58 ]
  ! GOEQUAL         [ shift and go to state 59 ]
  ! LOEQUAL         [ shift and go to state 60 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]


state 74

    (22) expression -> expression / expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               reduce using rule 22 (expression -> expression / expression .)
    +               reduce using rule 22 (expression -> expression / expression .)
    -               reduce using rule 22 (expression -> expression / expression .)
    *               reduce using rule 22 (expression -> expression / expression .)
    /               reduce using rule 22 (expression -> expression / expression .)
    ^               reduce using rule 22 (expression -> expression / expression .)
    LT              reduce using rule 22 (expression -> expression / expression .)
    GT              reduce using rule 22 (expression -> expression / expression .)
    EQUAL           reduce using rule 22 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 22 (expression -> expression / expression .)
    GOEQUAL         reduce using rule 22 (expression -> expression / expression .)
    LOEQUAL         reduce using rule 22 (expression -> expression / expression .)
    AND             reduce using rule 22 (expression -> expression / expression .)
    OR              reduce using rule 22 (expression -> expression / expression .)
    ;               reduce using rule 22 (expression -> expression / expression .)

  ! +               [ shift and go to state 50 ]
  ! -               [ shift and go to state 51 ]
  ! *               [ shift and go to state 52 ]
  ! /               [ shift and go to state 53 ]
  ! ^               [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GT              [ shift and go to state 56 ]
  ! EQUAL           [ shift and go to state 57 ]
  ! NOTEQUAL        [ shift and go to state 58 ]
  ! GOEQUAL         [ shift and go to state 59 ]
  ! LOEQUAL         [ shift and go to state 60 ]
  ! AND             [ shift and go to state 61 ]
  ! OR              [ shift and go to state 62 ]


state 75

    (23) expression -> expression ^ expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 23 (expression -> expression ^ expression .)
    ;               reduce using rule 23 (expression -> expression ^ expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! ^               [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! LT              [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! GT              [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! EQUAL           [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! NOTEQUAL        [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! GOEQUAL         [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! LOEQUAL         [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! AND             [ reduce using rule 23 (expression -> expression ^ expression .) ]
  ! OR              [ reduce using rule 23 (expression -> expression ^ expression .) ]


state 76

    (24) expression -> expression LT expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 24 (expression -> expression LT expression .)
    ;               reduce using rule 24 (expression -> expression LT expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! ^               [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! EQUAL           [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! NOTEQUAL        [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! GOEQUAL         [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! LOEQUAL         [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression LT expression .) ]


state 77

    (25) expression -> expression GT expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 25 (expression -> expression GT expression .)
    ;               reduce using rule 25 (expression -> expression GT expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! ^               [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! EQUAL           [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! NOTEQUAL        [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! GOEQUAL         [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! LOEQUAL         [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 25 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 25 (expression -> expression GT expression .) ]


state 78

    (26) expression -> expression EQUAL expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 26 (expression -> expression EQUAL expression .)
    ;               reduce using rule 26 (expression -> expression EQUAL expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! ^               [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! LT              [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! GT              [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! GOEQUAL         [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! LOEQUAL         [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 26 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 26 (expression -> expression EQUAL expression .) ]


state 79

    (27) expression -> expression NOTEQUAL expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    ;               reduce using rule 27 (expression -> expression NOTEQUAL expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! ^               [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! LT              [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! GT              [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! GOEQUAL         [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! LOEQUAL         [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression NOTEQUAL expression .) ]


state 80

    (28) expression -> expression GOEQUAL expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 28 (expression -> expression GOEQUAL expression .)
    ;               reduce using rule 28 (expression -> expression GOEQUAL expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! -               [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! *               [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! ^               [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! LT              [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! GT              [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! GOEQUAL         [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! LOEQUAL         [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! AND             [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]
  ! OR              [ reduce using rule 28 (expression -> expression GOEQUAL expression .) ]


state 81

    (29) expression -> expression LOEQUAL expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 29 (expression -> expression LOEQUAL expression .)
    ;               reduce using rule 29 (expression -> expression LOEQUAL expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! -               [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! *               [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! ^               [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! LT              [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! GT              [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! GOEQUAL         [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! LOEQUAL         [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! AND             [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]
  ! OR              [ reduce using rule 29 (expression -> expression LOEQUAL expression .) ]


state 82

    (30) expression -> expression AND expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 30 (expression -> expression AND expression .)
    ;               reduce using rule 30 (expression -> expression AND expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! GOEQUAL         [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! LOEQUAL         [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression AND expression .) ]


state 83

    (31) expression -> expression OR expression .
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GOEQUAL resolved as shift
  ! shift/reduce conflict for LOEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 31 (expression -> expression OR expression .)
    ;               reduce using rule 31 (expression -> expression OR expression .)
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62

  ! +               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! GOEQUAL         [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! LOEQUAL         [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression OR expression .) ]


state 84

    (44) for -> FOR ( declareWithVal ; expression . ; assign ) { segment }
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    ;               shift and go to state 87
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 85

    (39) conditional -> IF ( expression ) { . segment } elif else
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    segment                        shift and go to state 88
    while                          shift and go to state 3
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 86

    (45) while -> WHILE ( expression ) { segment . }

    }               shift and go to state 89


state 87

    (44) for -> FOR ( declareWithVal ; expression ; . assign ) { segment }
    (13) assign -> . NAME = expression

    NAME            shift and go to state 16

    assign                         shift and go to state 90

state 88

    (39) conditional -> IF ( expression ) { segment . } elif else

    }               shift and go to state 91


state 89

    (45) while -> WHILE ( expression ) { segment } .

    WHILE           reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    FOR             reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    IF              reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    PRINT           reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    NAME            reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    INTDEC          reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    FLOATDEC        reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    BOOLEAN         reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    STRING          reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    $end            reduce using rule 45 (while -> WHILE ( expression ) { segment } .)
    }               reduce using rule 45 (while -> WHILE ( expression ) { segment } .)


state 90

    (44) for -> FOR ( declareWithVal ; expression ; assign . ) { segment }

    )               shift and go to state 92


state 91

    (39) conditional -> IF ( expression ) { segment } . elif else
    (40) elif -> . ELIF ( expression ) { segment } elif
    (41) elif -> .

    ELIF            shift and go to state 94
    ELSE            reduce using rule 41 (elif -> .)
    WHILE           reduce using rule 41 (elif -> .)
    FOR             reduce using rule 41 (elif -> .)
    IF              reduce using rule 41 (elif -> .)
    PRINT           reduce using rule 41 (elif -> .)
    NAME            reduce using rule 41 (elif -> .)
    INTDEC          reduce using rule 41 (elif -> .)
    FLOATDEC        reduce using rule 41 (elif -> .)
    BOOLEAN         reduce using rule 41 (elif -> .)
    STRING          reduce using rule 41 (elif -> .)
    $end            reduce using rule 41 (elif -> .)
    }               reduce using rule 41 (elif -> .)

    elif                           shift and go to state 93

state 92

    (44) for -> FOR ( declareWithVal ; expression ; assign ) . { segment }

    {               shift and go to state 95


state 93

    (39) conditional -> IF ( expression ) { segment } elif . else
    (42) else -> . ELSE { segment }
    (43) else -> .

    ELSE            shift and go to state 97
    WHILE           reduce using rule 43 (else -> .)
    FOR             reduce using rule 43 (else -> .)
    IF              reduce using rule 43 (else -> .)
    PRINT           reduce using rule 43 (else -> .)
    NAME            reduce using rule 43 (else -> .)
    INTDEC          reduce using rule 43 (else -> .)
    FLOATDEC        reduce using rule 43 (else -> .)
    BOOLEAN         reduce using rule 43 (else -> .)
    STRING          reduce using rule 43 (else -> .)
    $end            reduce using rule 43 (else -> .)
    }               reduce using rule 43 (else -> .)

    else                           shift and go to state 96

state 94

    (40) elif -> ELIF . ( expression ) { segment } elif

    (               shift and go to state 98


state 95

    (44) for -> FOR ( declareWithVal ; expression ; assign ) { . segment }
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    segment                        shift and go to state 99
    while                          shift and go to state 3
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 96

    (39) conditional -> IF ( expression ) { segment } elif else .

    WHILE           reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    FOR             reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    IF              reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    PRINT           reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    NAME            reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    INTDEC          reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    FLOATDEC        reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    BOOLEAN         reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    STRING          reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    $end            reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)
    }               reduce using rule 39 (conditional -> IF ( expression ) { segment } elif else .)


state 97

    (42) else -> ELSE . { segment }

    {               shift and go to state 100


state 98

    (40) elif -> ELIF ( . expression ) { segment } elif
    (19) expression -> . expression + expression
    (20) expression -> . expression - expression
    (21) expression -> . expression * expression
    (22) expression -> . expression / expression
    (23) expression -> . expression ^ expression
    (24) expression -> . expression LT expression
    (25) expression -> . expression GT expression
    (26) expression -> . expression EQUAL expression
    (27) expression -> . expression NOTEQUAL expression
    (28) expression -> . expression GOEQUAL expression
    (29) expression -> . expression LOEQUAL expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (32) expression -> . - expression
    (33) expression -> . ( expression )
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . BOOLEAN
    (37) expression -> . STRING_V
    (38) expression -> . NAME

    -               shift and go to state 36
    (               shift and go to state 34
    INUMBER         shift and go to state 37
    FNUMBER         shift and go to state 38
    BOOLEAN         shift and go to state 39
    STRING_V        shift and go to state 40
    NAME            shift and go to state 41

    expression                     shift and go to state 101

state 99

    (44) for -> FOR ( declareWithVal ; expression ; assign ) { segment . }

    }               shift and go to state 102


state 100

    (42) else -> ELSE { . segment }
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    segment                        shift and go to state 103
    while                          shift and go to state 3
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 101

    (40) elif -> ELIF ( expression . ) { segment } elif
    (19) expression -> expression . + expression
    (20) expression -> expression . - expression
    (21) expression -> expression . * expression
    (22) expression -> expression . / expression
    (23) expression -> expression . ^ expression
    (24) expression -> expression . LT expression
    (25) expression -> expression . GT expression
    (26) expression -> expression . EQUAL expression
    (27) expression -> expression . NOTEQUAL expression
    (28) expression -> expression . GOEQUAL expression
    (29) expression -> expression . LOEQUAL expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    )               shift and go to state 104
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53
    ^               shift and go to state 54
    LT              shift and go to state 55
    GT              shift and go to state 56
    EQUAL           shift and go to state 57
    NOTEQUAL        shift and go to state 58
    GOEQUAL         shift and go to state 59
    LOEQUAL         shift and go to state 60
    AND             shift and go to state 61
    OR              shift and go to state 62


state 102

    (44) for -> FOR ( declareWithVal ; expression ; assign ) { segment } .

    WHILE           reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    FOR             reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    IF              reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    PRINT           reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    NAME            reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    INTDEC          reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    FLOATDEC        reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    BOOLEAN         reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    STRING          reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    $end            reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)
    }               reduce using rule 44 (for -> FOR ( declareWithVal ; expression ; assign ) { segment } .)


state 103

    (42) else -> ELSE { segment . }

    }               shift and go to state 105


state 104

    (40) elif -> ELIF ( expression ) . { segment } elif

    {               shift and go to state 106


state 105

    (42) else -> ELSE { segment } .

    WHILE           reduce using rule 42 (else -> ELSE { segment } .)
    FOR             reduce using rule 42 (else -> ELSE { segment } .)
    IF              reduce using rule 42 (else -> ELSE { segment } .)
    PRINT           reduce using rule 42 (else -> ELSE { segment } .)
    NAME            reduce using rule 42 (else -> ELSE { segment } .)
    INTDEC          reduce using rule 42 (else -> ELSE { segment } .)
    FLOATDEC        reduce using rule 42 (else -> ELSE { segment } .)
    BOOLEAN         reduce using rule 42 (else -> ELSE { segment } .)
    STRING          reduce using rule 42 (else -> ELSE { segment } .)
    $end            reduce using rule 42 (else -> ELSE { segment } .)
    }               reduce using rule 42 (else -> ELSE { segment } .)


state 106

    (40) elif -> ELIF ( expression ) { . segment } elif
    (2) segment -> . while segment
    (3) segment -> . for segment
    (4) segment -> . conditional segment
    (5) segment -> . statement ; segment
    (6) segment -> . declaration ; segment
    (7) segment -> .
    (45) while -> . WHILE ( expression ) { segment }
    (44) for -> . FOR ( declareWithVal ; expression ; assign ) { segment }
    (39) conditional -> . IF ( expression ) { segment } elif else
    (18) statement -> . PRINT ( expression )
    (8) declaration -> . declareWithVal
    (9) declaration -> . declareVar
    (10) declaration -> . assign
    (11) declareWithVal -> . dataType NAME = expression
    (12) declareVar -> . dataType NAME
    (13) assign -> . NAME = expression
    (14) dataType -> . INTDEC
    (15) dataType -> . FLOATDEC
    (16) dataType -> . BOOLEAN
    (17) dataType -> . STRING

    }               reduce using rule 7 (segment -> .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 12
    PRINT           shift and go to state 13
    NAME            shift and go to state 16
    INTDEC          shift and go to state 17
    FLOATDEC        shift and go to state 18
    BOOLEAN         shift and go to state 19
    STRING          shift and go to state 20

    segment                        shift and go to state 107
    while                          shift and go to state 3
    for                            shift and go to state 4
    conditional                    shift and go to state 5
    statement                      shift and go to state 6
    declaration                    shift and go to state 7
    declareWithVal                 shift and go to state 10
    assign                         shift and go to state 11
    declareVar                     shift and go to state 14
    dataType                       shift and go to state 15

state 107

    (40) elif -> ELIF ( expression ) { segment . } elif

    }               shift and go to state 108


state 108

    (40) elif -> ELIF ( expression ) { segment } . elif
    (40) elif -> . ELIF ( expression ) { segment } elif
    (41) elif -> .

    ELIF            shift and go to state 94
    ELSE            reduce using rule 41 (elif -> .)
    WHILE           reduce using rule 41 (elif -> .)
    FOR             reduce using rule 41 (elif -> .)
    IF              reduce using rule 41 (elif -> .)
    PRINT           reduce using rule 41 (elif -> .)
    NAME            reduce using rule 41 (elif -> .)
    INTDEC          reduce using rule 41 (elif -> .)
    FLOATDEC        reduce using rule 41 (elif -> .)
    BOOLEAN         reduce using rule 41 (elif -> .)
    STRING          reduce using rule 41 (elif -> .)
    $end            reduce using rule 41 (elif -> .)
    }               reduce using rule 41 (elif -> .)

    elif                           shift and go to state 109

state 109

    (40) elif -> ELIF ( expression ) { segment } elif .

    ELSE            reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    WHILE           reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    FOR             reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    IF              reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    PRINT           reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    NAME            reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    INTDEC          reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    FLOATDEC        reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    BOOLEAN         reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    STRING          reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    $end            reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)
    }               reduce using rule 40 (elif -> ELIF ( expression ) { segment } elif .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 75 resolved as shift
WARNING: shift/reduce conflict for - in state 75 resolved as shift
WARNING: shift/reduce conflict for * in state 75 resolved as shift
WARNING: shift/reduce conflict for / in state 75 resolved as shift
WARNING: shift/reduce conflict for ^ in state 75 resolved as shift
WARNING: shift/reduce conflict for LT in state 75 resolved as shift
WARNING: shift/reduce conflict for GT in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for + in state 76 resolved as shift
WARNING: shift/reduce conflict for - in state 76 resolved as shift
WARNING: shift/reduce conflict for * in state 76 resolved as shift
WARNING: shift/reduce conflict for / in state 76 resolved as shift
WARNING: shift/reduce conflict for ^ in state 76 resolved as shift
WARNING: shift/reduce conflict for LT in state 76 resolved as shift
WARNING: shift/reduce conflict for GT in state 76 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 77 resolved as shift
WARNING: shift/reduce conflict for - in state 77 resolved as shift
WARNING: shift/reduce conflict for * in state 77 resolved as shift
WARNING: shift/reduce conflict for / in state 77 resolved as shift
WARNING: shift/reduce conflict for ^ in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for + in state 78 resolved as shift
WARNING: shift/reduce conflict for - in state 78 resolved as shift
WARNING: shift/reduce conflict for * in state 78 resolved as shift
WARNING: shift/reduce conflict for / in state 78 resolved as shift
WARNING: shift/reduce conflict for ^ in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for + in state 79 resolved as shift
WARNING: shift/reduce conflict for - in state 79 resolved as shift
WARNING: shift/reduce conflict for * in state 79 resolved as shift
WARNING: shift/reduce conflict for / in state 79 resolved as shift
WARNING: shift/reduce conflict for ^ in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for + in state 80 resolved as shift
WARNING: shift/reduce conflict for - in state 80 resolved as shift
WARNING: shift/reduce conflict for * in state 80 resolved as shift
WARNING: shift/reduce conflict for / in state 80 resolved as shift
WARNING: shift/reduce conflict for ^ in state 80 resolved as shift
WARNING: shift/reduce conflict for LT in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for + in state 81 resolved as shift
WARNING: shift/reduce conflict for - in state 81 resolved as shift
WARNING: shift/reduce conflict for * in state 81 resolved as shift
WARNING: shift/reduce conflict for / in state 81 resolved as shift
WARNING: shift/reduce conflict for ^ in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for + in state 82 resolved as shift
WARNING: shift/reduce conflict for - in state 82 resolved as shift
WARNING: shift/reduce conflict for * in state 82 resolved as shift
WARNING: shift/reduce conflict for / in state 82 resolved as shift
WARNING: shift/reduce conflict for ^ in state 82 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for GT in state 82 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for + in state 83 resolved as shift
WARNING: shift/reduce conflict for - in state 83 resolved as shift
WARNING: shift/reduce conflict for * in state 83 resolved as shift
WARNING: shift/reduce conflict for / in state 83 resolved as shift
WARNING: shift/reduce conflict for ^ in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for GOEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for LOEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
