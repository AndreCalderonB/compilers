Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> s
Rule 1     s -> segment
Rule 2     s -> segment s
Rule 3     segment -> conditional
Rule 4     segment -> statement
Rule 5     statement -> BOOLEAN NAME is_assign
Rule 6     statement -> INTDEC NAME is_assign
Rule 7     statement -> FLOATDEC NAME is_assign
Rule 8     is_assign -> = expression
Rule 9     is_assign -> <empty>
Rule 10    statement -> PRINT ( expression )
Rule 11    statement -> NAME = expression
Rule 12    expression -> expression + expression
Rule 13    expression -> expression - expression
Rule 14    expression -> expression * expression
Rule 15    expression -> expression / expression
Rule 16    expression -> expression ^ expression
Rule 17    expression -> expression < expression
Rule 18    expression -> expression > expression
Rule 19    expression -> expression EQUAL expression
Rule 20    expression -> expression NOTEQUAL expression
Rule 21    expression -> expression AND expression
Rule 22    expression -> expression OR expression
Rule 23    logic_expression -> expression < expression
Rule 24    logic_expression -> expression > expression
Rule 25    logic_expression -> expression EQUAL expression
Rule 26    logic_expression -> expression NOTEQUAL expression
Rule 27    logic_expression -> expression GOEQUAL expression
Rule 28    logic_expression -> expression LOEQUAL expression
Rule 29    logic_expression -> expression AND expression
Rule 30    logic_expression -> expression OR expression
Rule 31    expression -> - expression
Rule 32    expression -> ( expression )
Rule 33    expression -> INUMBER
Rule 34    expression -> FNUMBER
Rule 35    expression -> TRUE
Rule 36    expression -> FALSE
Rule 37    conditional -> IF ( logic_expression ) { s } elif else
Rule 38    elif -> ELIF ( logic_expression ) { s } else
Rule 39    elif -> <empty>
Rule 40    else -> ELSE { s }
Rule 41    else -> <empty>
Rule 42    expression -> NAME

Terminals, with rules where they appear

(                    : 10 32 37 38
)                    : 10 32 37 38
*                    : 14
+                    : 12
-                    : 13 31
/                    : 15
<                    : 17 23
=                    : 8 11
>                    : 18 24
AND                  : 21 29
BOOLEAN              : 5
ELIF                 : 38
ELSE                 : 40
EQUAL                : 19 25
FALSE                : 36
FLOATDEC             : 7
FNUMBER              : 34
GOEQUAL              : 27
IF                   : 37
INTDEC               : 6
INUMBER              : 33
LOEQUAL              : 28
NAME                 : 5 6 7 11 42
NOTEQUAL             : 20 26
OR                   : 22 30
PRINT                : 10
TRUE                 : 35
^                    : 16
error                : 
{                    : 37 38 40
}                    : 37 38 40

Nonterminals, with rules where they appear

conditional          : 3
elif                 : 37
else                 : 37 38
expression           : 8 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 32
is_assign            : 5 6 7
logic_expression     : 37 38
s                    : 2 37 38 40 0
segment              : 1 2
statement            : 4

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . segment
    (2) s -> . segment s
    (3) segment -> . conditional
    (4) segment -> . statement
    (37) conditional -> . IF ( logic_expression ) { s } elif else
    (5) statement -> . BOOLEAN NAME is_assign
    (6) statement -> . INTDEC NAME is_assign
    (7) statement -> . FLOATDEC NAME is_assign
    (10) statement -> . PRINT ( expression )
    (11) statement -> . NAME = expression

    IF              shift and go to state 5
    BOOLEAN         shift and go to state 6
    INTDEC          shift and go to state 8
    FLOATDEC        shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 7

    s                              shift and go to state 1
    segment                        shift and go to state 2
    conditional                    shift and go to state 3
    statement                      shift and go to state 4

state 1

    (0) S' -> s .



state 2

    (1) s -> segment .
    (2) s -> segment . s
    (1) s -> . segment
    (2) s -> . segment s
    (3) segment -> . conditional
    (4) segment -> . statement
    (37) conditional -> . IF ( logic_expression ) { s } elif else
    (5) statement -> . BOOLEAN NAME is_assign
    (6) statement -> . INTDEC NAME is_assign
    (7) statement -> . FLOATDEC NAME is_assign
    (10) statement -> . PRINT ( expression )
    (11) statement -> . NAME = expression

    $end            reduce using rule 1 (s -> segment .)
    }               reduce using rule 1 (s -> segment .)
    IF              shift and go to state 5
    BOOLEAN         shift and go to state 6
    INTDEC          shift and go to state 8
    FLOATDEC        shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 7

    segment                        shift and go to state 2
    s                              shift and go to state 11
    conditional                    shift and go to state 3
    statement                      shift and go to state 4

state 3

    (3) segment -> conditional .

    IF              reduce using rule 3 (segment -> conditional .)
    BOOLEAN         reduce using rule 3 (segment -> conditional .)
    INTDEC          reduce using rule 3 (segment -> conditional .)
    FLOATDEC        reduce using rule 3 (segment -> conditional .)
    PRINT           reduce using rule 3 (segment -> conditional .)
    NAME            reduce using rule 3 (segment -> conditional .)
    $end            reduce using rule 3 (segment -> conditional .)
    }               reduce using rule 3 (segment -> conditional .)


state 4

    (4) segment -> statement .

    IF              reduce using rule 4 (segment -> statement .)
    BOOLEAN         reduce using rule 4 (segment -> statement .)
    INTDEC          reduce using rule 4 (segment -> statement .)
    FLOATDEC        reduce using rule 4 (segment -> statement .)
    PRINT           reduce using rule 4 (segment -> statement .)
    NAME            reduce using rule 4 (segment -> statement .)
    $end            reduce using rule 4 (segment -> statement .)
    }               reduce using rule 4 (segment -> statement .)


state 5

    (37) conditional -> IF . ( logic_expression ) { s } elif else

    (               shift and go to state 12


state 6

    (5) statement -> BOOLEAN . NAME is_assign

    NAME            shift and go to state 13


state 7

    (11) statement -> NAME . = expression

    =               shift and go to state 14


state 8

    (6) statement -> INTDEC . NAME is_assign

    NAME            shift and go to state 15


state 9

    (7) statement -> FLOATDEC . NAME is_assign

    NAME            shift and go to state 16


state 10

    (10) statement -> PRINT . ( expression )

    (               shift and go to state 17


state 11

    (2) s -> segment s .

    $end            reduce using rule 2 (s -> segment s .)
    }               reduce using rule 2 (s -> segment s .)


state 12

    (37) conditional -> IF ( . logic_expression ) { s } elif else
    (23) logic_expression -> . expression < expression
    (24) logic_expression -> . expression > expression
    (25) logic_expression -> . expression EQUAL expression
    (26) logic_expression -> . expression NOTEQUAL expression
    (27) logic_expression -> . expression GOEQUAL expression
    (28) logic_expression -> . expression LOEQUAL expression
    (29) logic_expression -> . expression AND expression
    (30) logic_expression -> . expression OR expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    logic_expression               shift and go to state 19
    expression                     shift and go to state 20

state 13

    (5) statement -> BOOLEAN NAME . is_assign
    (8) is_assign -> . = expression
    (9) is_assign -> .

    =               shift and go to state 28
    IF              reduce using rule 9 (is_assign -> .)
    BOOLEAN         reduce using rule 9 (is_assign -> .)
    INTDEC          reduce using rule 9 (is_assign -> .)
    FLOATDEC        reduce using rule 9 (is_assign -> .)
    PRINT           reduce using rule 9 (is_assign -> .)
    NAME            reduce using rule 9 (is_assign -> .)
    $end            reduce using rule 9 (is_assign -> .)
    }               reduce using rule 9 (is_assign -> .)

    is_assign                      shift and go to state 27

state 14

    (11) statement -> NAME = . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 29

state 15

    (6) statement -> INTDEC NAME . is_assign
    (8) is_assign -> . = expression
    (9) is_assign -> .

    =               shift and go to state 28
    IF              reduce using rule 9 (is_assign -> .)
    BOOLEAN         reduce using rule 9 (is_assign -> .)
    INTDEC          reduce using rule 9 (is_assign -> .)
    FLOATDEC        reduce using rule 9 (is_assign -> .)
    PRINT           reduce using rule 9 (is_assign -> .)
    NAME            reduce using rule 9 (is_assign -> .)
    $end            reduce using rule 9 (is_assign -> .)
    }               reduce using rule 9 (is_assign -> .)

    is_assign                      shift and go to state 30

state 16

    (7) statement -> FLOATDEC NAME . is_assign
    (8) is_assign -> . = expression
    (9) is_assign -> .

    =               shift and go to state 28
    IF              reduce using rule 9 (is_assign -> .)
    BOOLEAN         reduce using rule 9 (is_assign -> .)
    INTDEC          reduce using rule 9 (is_assign -> .)
    FLOATDEC        reduce using rule 9 (is_assign -> .)
    PRINT           reduce using rule 9 (is_assign -> .)
    NAME            reduce using rule 9 (is_assign -> .)
    $end            reduce using rule 9 (is_assign -> .)
    }               reduce using rule 9 (is_assign -> .)

    is_assign                      shift and go to state 31

state 17

    (10) statement -> PRINT ( . expression )
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 32

state 18

    (32) expression -> ( . expression )
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 33

state 19

    (37) conditional -> IF ( logic_expression . ) { s } elif else

    )               shift and go to state 34


state 20

    (23) logic_expression -> expression . < expression
    (24) logic_expression -> expression . > expression
    (25) logic_expression -> expression . EQUAL expression
    (26) logic_expression -> expression . NOTEQUAL expression
    (27) logic_expression -> expression . GOEQUAL expression
    (28) logic_expression -> expression . LOEQUAL expression
    (29) logic_expression -> expression . AND expression
    (30) logic_expression -> expression . OR expression
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    <               shift and go to state 35
    >               shift and go to state 36
    EQUAL           shift and go to state 37
    NOTEQUAL        shift and go to state 38
    GOEQUAL         shift and go to state 39
    LOEQUAL         shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47


state 21

    (31) expression -> - . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 48

state 22

    (33) expression -> INUMBER .

    <               reduce using rule 33 (expression -> INUMBER .)
    >               reduce using rule 33 (expression -> INUMBER .)
    EQUAL           reduce using rule 33 (expression -> INUMBER .)
    NOTEQUAL        reduce using rule 33 (expression -> INUMBER .)
    GOEQUAL         reduce using rule 33 (expression -> INUMBER .)
    LOEQUAL         reduce using rule 33 (expression -> INUMBER .)
    AND             reduce using rule 33 (expression -> INUMBER .)
    OR              reduce using rule 33 (expression -> INUMBER .)
    +               reduce using rule 33 (expression -> INUMBER .)
    -               reduce using rule 33 (expression -> INUMBER .)
    *               reduce using rule 33 (expression -> INUMBER .)
    /               reduce using rule 33 (expression -> INUMBER .)
    ^               reduce using rule 33 (expression -> INUMBER .)
    IF              reduce using rule 33 (expression -> INUMBER .)
    BOOLEAN         reduce using rule 33 (expression -> INUMBER .)
    INTDEC          reduce using rule 33 (expression -> INUMBER .)
    FLOATDEC        reduce using rule 33 (expression -> INUMBER .)
    PRINT           reduce using rule 33 (expression -> INUMBER .)
    NAME            reduce using rule 33 (expression -> INUMBER .)
    $end            reduce using rule 33 (expression -> INUMBER .)
    }               reduce using rule 33 (expression -> INUMBER .)
    )               reduce using rule 33 (expression -> INUMBER .)


state 23

    (34) expression -> FNUMBER .

    <               reduce using rule 34 (expression -> FNUMBER .)
    >               reduce using rule 34 (expression -> FNUMBER .)
    EQUAL           reduce using rule 34 (expression -> FNUMBER .)
    NOTEQUAL        reduce using rule 34 (expression -> FNUMBER .)
    GOEQUAL         reduce using rule 34 (expression -> FNUMBER .)
    LOEQUAL         reduce using rule 34 (expression -> FNUMBER .)
    AND             reduce using rule 34 (expression -> FNUMBER .)
    OR              reduce using rule 34 (expression -> FNUMBER .)
    +               reduce using rule 34 (expression -> FNUMBER .)
    -               reduce using rule 34 (expression -> FNUMBER .)
    *               reduce using rule 34 (expression -> FNUMBER .)
    /               reduce using rule 34 (expression -> FNUMBER .)
    ^               reduce using rule 34 (expression -> FNUMBER .)
    IF              reduce using rule 34 (expression -> FNUMBER .)
    BOOLEAN         reduce using rule 34 (expression -> FNUMBER .)
    INTDEC          reduce using rule 34 (expression -> FNUMBER .)
    FLOATDEC        reduce using rule 34 (expression -> FNUMBER .)
    PRINT           reduce using rule 34 (expression -> FNUMBER .)
    NAME            reduce using rule 34 (expression -> FNUMBER .)
    $end            reduce using rule 34 (expression -> FNUMBER .)
    }               reduce using rule 34 (expression -> FNUMBER .)
    )               reduce using rule 34 (expression -> FNUMBER .)


state 24

    (35) expression -> TRUE .

    <               reduce using rule 35 (expression -> TRUE .)
    >               reduce using rule 35 (expression -> TRUE .)
    EQUAL           reduce using rule 35 (expression -> TRUE .)
    NOTEQUAL        reduce using rule 35 (expression -> TRUE .)
    GOEQUAL         reduce using rule 35 (expression -> TRUE .)
    LOEQUAL         reduce using rule 35 (expression -> TRUE .)
    AND             reduce using rule 35 (expression -> TRUE .)
    OR              reduce using rule 35 (expression -> TRUE .)
    +               reduce using rule 35 (expression -> TRUE .)
    -               reduce using rule 35 (expression -> TRUE .)
    *               reduce using rule 35 (expression -> TRUE .)
    /               reduce using rule 35 (expression -> TRUE .)
    ^               reduce using rule 35 (expression -> TRUE .)
    IF              reduce using rule 35 (expression -> TRUE .)
    BOOLEAN         reduce using rule 35 (expression -> TRUE .)
    INTDEC          reduce using rule 35 (expression -> TRUE .)
    FLOATDEC        reduce using rule 35 (expression -> TRUE .)
    PRINT           reduce using rule 35 (expression -> TRUE .)
    NAME            reduce using rule 35 (expression -> TRUE .)
    $end            reduce using rule 35 (expression -> TRUE .)
    }               reduce using rule 35 (expression -> TRUE .)
    )               reduce using rule 35 (expression -> TRUE .)


state 25

    (36) expression -> FALSE .

    <               reduce using rule 36 (expression -> FALSE .)
    >               reduce using rule 36 (expression -> FALSE .)
    EQUAL           reduce using rule 36 (expression -> FALSE .)
    NOTEQUAL        reduce using rule 36 (expression -> FALSE .)
    GOEQUAL         reduce using rule 36 (expression -> FALSE .)
    LOEQUAL         reduce using rule 36 (expression -> FALSE .)
    AND             reduce using rule 36 (expression -> FALSE .)
    OR              reduce using rule 36 (expression -> FALSE .)
    +               reduce using rule 36 (expression -> FALSE .)
    -               reduce using rule 36 (expression -> FALSE .)
    *               reduce using rule 36 (expression -> FALSE .)
    /               reduce using rule 36 (expression -> FALSE .)
    ^               reduce using rule 36 (expression -> FALSE .)
    IF              reduce using rule 36 (expression -> FALSE .)
    BOOLEAN         reduce using rule 36 (expression -> FALSE .)
    INTDEC          reduce using rule 36 (expression -> FALSE .)
    FLOATDEC        reduce using rule 36 (expression -> FALSE .)
    PRINT           reduce using rule 36 (expression -> FALSE .)
    NAME            reduce using rule 36 (expression -> FALSE .)
    $end            reduce using rule 36 (expression -> FALSE .)
    }               reduce using rule 36 (expression -> FALSE .)
    )               reduce using rule 36 (expression -> FALSE .)


state 26

    (42) expression -> NAME .

    <               reduce using rule 42 (expression -> NAME .)
    >               reduce using rule 42 (expression -> NAME .)
    EQUAL           reduce using rule 42 (expression -> NAME .)
    NOTEQUAL        reduce using rule 42 (expression -> NAME .)
    GOEQUAL         reduce using rule 42 (expression -> NAME .)
    LOEQUAL         reduce using rule 42 (expression -> NAME .)
    AND             reduce using rule 42 (expression -> NAME .)
    OR              reduce using rule 42 (expression -> NAME .)
    +               reduce using rule 42 (expression -> NAME .)
    -               reduce using rule 42 (expression -> NAME .)
    *               reduce using rule 42 (expression -> NAME .)
    /               reduce using rule 42 (expression -> NAME .)
    ^               reduce using rule 42 (expression -> NAME .)
    IF              reduce using rule 42 (expression -> NAME .)
    BOOLEAN         reduce using rule 42 (expression -> NAME .)
    INTDEC          reduce using rule 42 (expression -> NAME .)
    FLOATDEC        reduce using rule 42 (expression -> NAME .)
    PRINT           reduce using rule 42 (expression -> NAME .)
    NAME            reduce using rule 42 (expression -> NAME .)
    $end            reduce using rule 42 (expression -> NAME .)
    }               reduce using rule 42 (expression -> NAME .)
    )               reduce using rule 42 (expression -> NAME .)


state 27

    (5) statement -> BOOLEAN NAME is_assign .

    IF              reduce using rule 5 (statement -> BOOLEAN NAME is_assign .)
    BOOLEAN         reduce using rule 5 (statement -> BOOLEAN NAME is_assign .)
    INTDEC          reduce using rule 5 (statement -> BOOLEAN NAME is_assign .)
    FLOATDEC        reduce using rule 5 (statement -> BOOLEAN NAME is_assign .)
    PRINT           reduce using rule 5 (statement -> BOOLEAN NAME is_assign .)
    NAME            reduce using rule 5 (statement -> BOOLEAN NAME is_assign .)
    $end            reduce using rule 5 (statement -> BOOLEAN NAME is_assign .)
    }               reduce using rule 5 (statement -> BOOLEAN NAME is_assign .)


state 28

    (8) is_assign -> = . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 49

state 29

    (11) statement -> NAME = expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    IF              reduce using rule 11 (statement -> NAME = expression .)
    BOOLEAN         reduce using rule 11 (statement -> NAME = expression .)
    INTDEC          reduce using rule 11 (statement -> NAME = expression .)
    FLOATDEC        reduce using rule 11 (statement -> NAME = expression .)
    PRINT           reduce using rule 11 (statement -> NAME = expression .)
    NAME            reduce using rule 11 (statement -> NAME = expression .)
    $end            reduce using rule 11 (statement -> NAME = expression .)
    }               reduce using rule 11 (statement -> NAME = expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 30

    (6) statement -> INTDEC NAME is_assign .

    IF              reduce using rule 6 (statement -> INTDEC NAME is_assign .)
    BOOLEAN         reduce using rule 6 (statement -> INTDEC NAME is_assign .)
    INTDEC          reduce using rule 6 (statement -> INTDEC NAME is_assign .)
    FLOATDEC        reduce using rule 6 (statement -> INTDEC NAME is_assign .)
    PRINT           reduce using rule 6 (statement -> INTDEC NAME is_assign .)
    NAME            reduce using rule 6 (statement -> INTDEC NAME is_assign .)
    $end            reduce using rule 6 (statement -> INTDEC NAME is_assign .)
    }               reduce using rule 6 (statement -> INTDEC NAME is_assign .)


state 31

    (7) statement -> FLOATDEC NAME is_assign .

    IF              reduce using rule 7 (statement -> FLOATDEC NAME is_assign .)
    BOOLEAN         reduce using rule 7 (statement -> FLOATDEC NAME is_assign .)
    INTDEC          reduce using rule 7 (statement -> FLOATDEC NAME is_assign .)
    FLOATDEC        reduce using rule 7 (statement -> FLOATDEC NAME is_assign .)
    PRINT           reduce using rule 7 (statement -> FLOATDEC NAME is_assign .)
    NAME            reduce using rule 7 (statement -> FLOATDEC NAME is_assign .)
    $end            reduce using rule 7 (statement -> FLOATDEC NAME is_assign .)
    }               reduce using rule 7 (statement -> FLOATDEC NAME is_assign .)


state 32

    (10) statement -> PRINT ( expression . )
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    )               shift and go to state 56
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 33

    (32) expression -> ( expression . )
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    )               shift and go to state 57
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 34

    (37) conditional -> IF ( logic_expression ) . { s } elif else

    {               shift and go to state 58


state 35

    (23) logic_expression -> expression < . expression
    (17) expression -> expression < . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 59

state 36

    (24) logic_expression -> expression > . expression
    (18) expression -> expression > . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 60

state 37

    (25) logic_expression -> expression EQUAL . expression
    (19) expression -> expression EQUAL . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 61

state 38

    (26) logic_expression -> expression NOTEQUAL . expression
    (20) expression -> expression NOTEQUAL . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 62

state 39

    (27) logic_expression -> expression GOEQUAL . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 63

state 40

    (28) logic_expression -> expression LOEQUAL . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 64

state 41

    (29) logic_expression -> expression AND . expression
    (21) expression -> expression AND . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 65

state 42

    (30) logic_expression -> expression OR . expression
    (22) expression -> expression OR . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 66

state 43

    (12) expression -> expression + . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 67

state 44

    (13) expression -> expression - . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 68

state 45

    (14) expression -> expression * . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 69

state 46

    (15) expression -> expression / . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 70

state 47

    (16) expression -> expression ^ . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 71

state 48

    (31) expression -> - expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    <               reduce using rule 31 (expression -> - expression .)
    >               reduce using rule 31 (expression -> - expression .)
    EQUAL           reduce using rule 31 (expression -> - expression .)
    NOTEQUAL        reduce using rule 31 (expression -> - expression .)
    GOEQUAL         reduce using rule 31 (expression -> - expression .)
    LOEQUAL         reduce using rule 31 (expression -> - expression .)
    AND             reduce using rule 31 (expression -> - expression .)
    OR              reduce using rule 31 (expression -> - expression .)
    +               reduce using rule 31 (expression -> - expression .)
    -               reduce using rule 31 (expression -> - expression .)
    *               reduce using rule 31 (expression -> - expression .)
    /               reduce using rule 31 (expression -> - expression .)
    ^               reduce using rule 31 (expression -> - expression .)
    IF              reduce using rule 31 (expression -> - expression .)
    BOOLEAN         reduce using rule 31 (expression -> - expression .)
    INTDEC          reduce using rule 31 (expression -> - expression .)
    FLOATDEC        reduce using rule 31 (expression -> - expression .)
    PRINT           reduce using rule 31 (expression -> - expression .)
    NAME            reduce using rule 31 (expression -> - expression .)
    $end            reduce using rule 31 (expression -> - expression .)
    }               reduce using rule 31 (expression -> - expression .)
    )               reduce using rule 31 (expression -> - expression .)

  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 49

    (8) is_assign -> = expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    IF              reduce using rule 8 (is_assign -> = expression .)
    BOOLEAN         reduce using rule 8 (is_assign -> = expression .)
    INTDEC          reduce using rule 8 (is_assign -> = expression .)
    FLOATDEC        reduce using rule 8 (is_assign -> = expression .)
    PRINT           reduce using rule 8 (is_assign -> = expression .)
    NAME            reduce using rule 8 (is_assign -> = expression .)
    $end            reduce using rule 8 (is_assign -> = expression .)
    }               reduce using rule 8 (is_assign -> = expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 50

    (17) expression -> expression < . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 72

state 51

    (18) expression -> expression > . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 73

state 52

    (19) expression -> expression EQUAL . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 74

state 53

    (20) expression -> expression NOTEQUAL . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 75

state 54

    (21) expression -> expression AND . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 76

state 55

    (22) expression -> expression OR . expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    expression                     shift and go to state 77

state 56

    (10) statement -> PRINT ( expression ) .

    IF              reduce using rule 10 (statement -> PRINT ( expression ) .)
    BOOLEAN         reduce using rule 10 (statement -> PRINT ( expression ) .)
    INTDEC          reduce using rule 10 (statement -> PRINT ( expression ) .)
    FLOATDEC        reduce using rule 10 (statement -> PRINT ( expression ) .)
    PRINT           reduce using rule 10 (statement -> PRINT ( expression ) .)
    NAME            reduce using rule 10 (statement -> PRINT ( expression ) .)
    $end            reduce using rule 10 (statement -> PRINT ( expression ) .)
    }               reduce using rule 10 (statement -> PRINT ( expression ) .)


state 57

    (32) expression -> ( expression ) .

    <               reduce using rule 32 (expression -> ( expression ) .)
    >               reduce using rule 32 (expression -> ( expression ) .)
    EQUAL           reduce using rule 32 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 32 (expression -> ( expression ) .)
    GOEQUAL         reduce using rule 32 (expression -> ( expression ) .)
    LOEQUAL         reduce using rule 32 (expression -> ( expression ) .)
    AND             reduce using rule 32 (expression -> ( expression ) .)
    OR              reduce using rule 32 (expression -> ( expression ) .)
    +               reduce using rule 32 (expression -> ( expression ) .)
    -               reduce using rule 32 (expression -> ( expression ) .)
    *               reduce using rule 32 (expression -> ( expression ) .)
    /               reduce using rule 32 (expression -> ( expression ) .)
    ^               reduce using rule 32 (expression -> ( expression ) .)
    IF              reduce using rule 32 (expression -> ( expression ) .)
    BOOLEAN         reduce using rule 32 (expression -> ( expression ) .)
    INTDEC          reduce using rule 32 (expression -> ( expression ) .)
    FLOATDEC        reduce using rule 32 (expression -> ( expression ) .)
    PRINT           reduce using rule 32 (expression -> ( expression ) .)
    NAME            reduce using rule 32 (expression -> ( expression ) .)
    $end            reduce using rule 32 (expression -> ( expression ) .)
    }               reduce using rule 32 (expression -> ( expression ) .)
    )               reduce using rule 32 (expression -> ( expression ) .)


state 58

    (37) conditional -> IF ( logic_expression ) { . s } elif else
    (1) s -> . segment
    (2) s -> . segment s
    (3) segment -> . conditional
    (4) segment -> . statement
    (37) conditional -> . IF ( logic_expression ) { s } elif else
    (5) statement -> . BOOLEAN NAME is_assign
    (6) statement -> . INTDEC NAME is_assign
    (7) statement -> . FLOATDEC NAME is_assign
    (10) statement -> . PRINT ( expression )
    (11) statement -> . NAME = expression

    IF              shift and go to state 5
    BOOLEAN         shift and go to state 6
    INTDEC          shift and go to state 8
    FLOATDEC        shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 7

    s                              shift and go to state 78
    segment                        shift and go to state 2
    conditional                    shift and go to state 3
    statement                      shift and go to state 4

state 59

    (23) logic_expression -> expression < expression .
    (17) expression -> expression < expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    )               reduce using rule 23 (logic_expression -> expression < expression .)
    <               reduce using rule 17 (expression -> expression < expression .)
    >               reduce using rule 17 (expression -> expression < expression .)
    EQUAL           reduce using rule 17 (expression -> expression < expression .)
    NOTEQUAL        reduce using rule 17 (expression -> expression < expression .)
    GOEQUAL         reduce using rule 17 (expression -> expression < expression .)
    LOEQUAL         reduce using rule 17 (expression -> expression < expression .)
    +               reduce using rule 17 (expression -> expression < expression .)
    -               reduce using rule 17 (expression -> expression < expression .)
    *               reduce using rule 17 (expression -> expression < expression .)
    /               reduce using rule 17 (expression -> expression < expression .)
    ^               reduce using rule 17 (expression -> expression < expression .)
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! AND             [ reduce using rule 17 (expression -> expression < expression .) ]
  ! OR              [ reduce using rule 17 (expression -> expression < expression .) ]
  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 60

    (24) logic_expression -> expression > expression .
    (18) expression -> expression > expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    )               reduce using rule 24 (logic_expression -> expression > expression .)
    <               reduce using rule 18 (expression -> expression > expression .)
    >               reduce using rule 18 (expression -> expression > expression .)
    EQUAL           reduce using rule 18 (expression -> expression > expression .)
    NOTEQUAL        reduce using rule 18 (expression -> expression > expression .)
    GOEQUAL         reduce using rule 18 (expression -> expression > expression .)
    LOEQUAL         reduce using rule 18 (expression -> expression > expression .)
    +               reduce using rule 18 (expression -> expression > expression .)
    -               reduce using rule 18 (expression -> expression > expression .)
    *               reduce using rule 18 (expression -> expression > expression .)
    /               reduce using rule 18 (expression -> expression > expression .)
    ^               reduce using rule 18 (expression -> expression > expression .)
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! AND             [ reduce using rule 18 (expression -> expression > expression .) ]
  ! OR              [ reduce using rule 18 (expression -> expression > expression .) ]
  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 61

    (25) logic_expression -> expression EQUAL expression .
    (19) expression -> expression EQUAL expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 25 (logic_expression -> expression EQUAL expression .)
    GOEQUAL         reduce using rule 19 (expression -> expression EQUAL expression .)
    LOEQUAL         reduce using rule 19 (expression -> expression EQUAL expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! <               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! >               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! +               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! ^               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]


state 62

    (26) logic_expression -> expression NOTEQUAL expression .
    (20) expression -> expression NOTEQUAL expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 26 (logic_expression -> expression NOTEQUAL expression .)
    GOEQUAL         reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    LOEQUAL         reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! <               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! >               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! +               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! ^               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]


state 63

    (27) logic_expression -> expression GOEQUAL expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    )               reduce using rule 27 (logic_expression -> expression GOEQUAL expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 64

    (28) logic_expression -> expression LOEQUAL expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    )               reduce using rule 28 (logic_expression -> expression LOEQUAL expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 65

    (29) logic_expression -> expression AND expression .
    (21) expression -> expression AND expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    )               reduce using rule 29 (logic_expression -> expression AND expression .)
    <               reduce using rule 21 (expression -> expression AND expression .)
    >               reduce using rule 21 (expression -> expression AND expression .)
    EQUAL           reduce using rule 21 (expression -> expression AND expression .)
    NOTEQUAL        reduce using rule 21 (expression -> expression AND expression .)
    GOEQUAL         reduce using rule 21 (expression -> expression AND expression .)
    LOEQUAL         reduce using rule 21 (expression -> expression AND expression .)
    AND             reduce using rule 21 (expression -> expression AND expression .)
    OR              reduce using rule 21 (expression -> expression AND expression .)
    +               reduce using rule 21 (expression -> expression AND expression .)
    -               reduce using rule 21 (expression -> expression AND expression .)
    *               reduce using rule 21 (expression -> expression AND expression .)
    /               reduce using rule 21 (expression -> expression AND expression .)
    ^               reduce using rule 21 (expression -> expression AND expression .)

  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 66

    (30) logic_expression -> expression OR expression .
    (22) expression -> expression OR expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    )               reduce using rule 30 (logic_expression -> expression OR expression .)
    <               reduce using rule 22 (expression -> expression OR expression .)
    >               reduce using rule 22 (expression -> expression OR expression .)
    EQUAL           reduce using rule 22 (expression -> expression OR expression .)
    NOTEQUAL        reduce using rule 22 (expression -> expression OR expression .)
    GOEQUAL         reduce using rule 22 (expression -> expression OR expression .)
    LOEQUAL         reduce using rule 22 (expression -> expression OR expression .)
    AND             reduce using rule 22 (expression -> expression OR expression .)
    OR              reduce using rule 22 (expression -> expression OR expression .)
    +               reduce using rule 22 (expression -> expression OR expression .)
    -               reduce using rule 22 (expression -> expression OR expression .)
    *               reduce using rule 22 (expression -> expression OR expression .)
    /               reduce using rule 22 (expression -> expression OR expression .)
    ^               reduce using rule 22 (expression -> expression OR expression .)

  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 67

    (12) expression -> expression + expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    EQUAL           reduce using rule 12 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 12 (expression -> expression + expression .)
    GOEQUAL         reduce using rule 12 (expression -> expression + expression .)
    LOEQUAL         reduce using rule 12 (expression -> expression + expression .)
    +               reduce using rule 12 (expression -> expression + expression .)
    -               reduce using rule 12 (expression -> expression + expression .)
    *               reduce using rule 12 (expression -> expression + expression .)
    /               reduce using rule 12 (expression -> expression + expression .)
    IF              reduce using rule 12 (expression -> expression + expression .)
    BOOLEAN         reduce using rule 12 (expression -> expression + expression .)
    INTDEC          reduce using rule 12 (expression -> expression + expression .)
    FLOATDEC        reduce using rule 12 (expression -> expression + expression .)
    PRINT           reduce using rule 12 (expression -> expression + expression .)
    NAME            reduce using rule 12 (expression -> expression + expression .)
    $end            reduce using rule 12 (expression -> expression + expression .)
    }               reduce using rule 12 (expression -> expression + expression .)
    )               reduce using rule 12 (expression -> expression + expression .)
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! <               [ reduce using rule 12 (expression -> expression + expression .) ]
  ! >               [ reduce using rule 12 (expression -> expression + expression .) ]
  ! AND             [ reduce using rule 12 (expression -> expression + expression .) ]
  ! OR              [ reduce using rule 12 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 12 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 68

    (13) expression -> expression - expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    EQUAL           reduce using rule 13 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 13 (expression -> expression - expression .)
    GOEQUAL         reduce using rule 13 (expression -> expression - expression .)
    LOEQUAL         reduce using rule 13 (expression -> expression - expression .)
    +               reduce using rule 13 (expression -> expression - expression .)
    -               reduce using rule 13 (expression -> expression - expression .)
    *               reduce using rule 13 (expression -> expression - expression .)
    /               reduce using rule 13 (expression -> expression - expression .)
    IF              reduce using rule 13 (expression -> expression - expression .)
    BOOLEAN         reduce using rule 13 (expression -> expression - expression .)
    INTDEC          reduce using rule 13 (expression -> expression - expression .)
    FLOATDEC        reduce using rule 13 (expression -> expression - expression .)
    PRINT           reduce using rule 13 (expression -> expression - expression .)
    NAME            reduce using rule 13 (expression -> expression - expression .)
    $end            reduce using rule 13 (expression -> expression - expression .)
    }               reduce using rule 13 (expression -> expression - expression .)
    )               reduce using rule 13 (expression -> expression - expression .)
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! <               [ reduce using rule 13 (expression -> expression - expression .) ]
  ! >               [ reduce using rule 13 (expression -> expression - expression .) ]
  ! AND             [ reduce using rule 13 (expression -> expression - expression .) ]
  ! OR              [ reduce using rule 13 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 13 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 69

    (14) expression -> expression * expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    EQUAL           reduce using rule 14 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 14 (expression -> expression * expression .)
    GOEQUAL         reduce using rule 14 (expression -> expression * expression .)
    LOEQUAL         reduce using rule 14 (expression -> expression * expression .)
    *               reduce using rule 14 (expression -> expression * expression .)
    /               reduce using rule 14 (expression -> expression * expression .)
    IF              reduce using rule 14 (expression -> expression * expression .)
    BOOLEAN         reduce using rule 14 (expression -> expression * expression .)
    INTDEC          reduce using rule 14 (expression -> expression * expression .)
    FLOATDEC        reduce using rule 14 (expression -> expression * expression .)
    PRINT           reduce using rule 14 (expression -> expression * expression .)
    NAME            reduce using rule 14 (expression -> expression * expression .)
    $end            reduce using rule 14 (expression -> expression * expression .)
    }               reduce using rule 14 (expression -> expression * expression .)
    )               reduce using rule 14 (expression -> expression * expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! <               [ reduce using rule 14 (expression -> expression * expression .) ]
  ! >               [ reduce using rule 14 (expression -> expression * expression .) ]
  ! AND             [ reduce using rule 14 (expression -> expression * expression .) ]
  ! OR              [ reduce using rule 14 (expression -> expression * expression .) ]
  ! +               [ reduce using rule 14 (expression -> expression * expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression * expression .) ]
  ! ^               [ reduce using rule 14 (expression -> expression * expression .) ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 70

    (15) expression -> expression / expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    EQUAL           reduce using rule 15 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 15 (expression -> expression / expression .)
    GOEQUAL         reduce using rule 15 (expression -> expression / expression .)
    LOEQUAL         reduce using rule 15 (expression -> expression / expression .)
    *               reduce using rule 15 (expression -> expression / expression .)
    /               reduce using rule 15 (expression -> expression / expression .)
    IF              reduce using rule 15 (expression -> expression / expression .)
    BOOLEAN         reduce using rule 15 (expression -> expression / expression .)
    INTDEC          reduce using rule 15 (expression -> expression / expression .)
    FLOATDEC        reduce using rule 15 (expression -> expression / expression .)
    PRINT           reduce using rule 15 (expression -> expression / expression .)
    NAME            reduce using rule 15 (expression -> expression / expression .)
    $end            reduce using rule 15 (expression -> expression / expression .)
    }               reduce using rule 15 (expression -> expression / expression .)
    )               reduce using rule 15 (expression -> expression / expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! <               [ reduce using rule 15 (expression -> expression / expression .) ]
  ! >               [ reduce using rule 15 (expression -> expression / expression .) ]
  ! AND             [ reduce using rule 15 (expression -> expression / expression .) ]
  ! OR              [ reduce using rule 15 (expression -> expression / expression .) ]
  ! +               [ reduce using rule 15 (expression -> expression / expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression / expression .) ]
  ! ^               [ reduce using rule 15 (expression -> expression / expression .) ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 71

    (16) expression -> expression ^ expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    EQUAL           reduce using rule 16 (expression -> expression ^ expression .)
    NOTEQUAL        reduce using rule 16 (expression -> expression ^ expression .)
    GOEQUAL         reduce using rule 16 (expression -> expression ^ expression .)
    LOEQUAL         reduce using rule 16 (expression -> expression ^ expression .)
    +               reduce using rule 16 (expression -> expression ^ expression .)
    -               reduce using rule 16 (expression -> expression ^ expression .)
    *               reduce using rule 16 (expression -> expression ^ expression .)
    /               reduce using rule 16 (expression -> expression ^ expression .)
    ^               reduce using rule 16 (expression -> expression ^ expression .)
    IF              reduce using rule 16 (expression -> expression ^ expression .)
    BOOLEAN         reduce using rule 16 (expression -> expression ^ expression .)
    INTDEC          reduce using rule 16 (expression -> expression ^ expression .)
    FLOATDEC        reduce using rule 16 (expression -> expression ^ expression .)
    PRINT           reduce using rule 16 (expression -> expression ^ expression .)
    NAME            reduce using rule 16 (expression -> expression ^ expression .)
    $end            reduce using rule 16 (expression -> expression ^ expression .)
    }               reduce using rule 16 (expression -> expression ^ expression .)
    )               reduce using rule 16 (expression -> expression ^ expression .)
    <               shift and go to state 50
    >               shift and go to state 51
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! <               [ reduce using rule 16 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 16 (expression -> expression ^ expression .) ]
  ! AND             [ reduce using rule 16 (expression -> expression ^ expression .) ]
  ! OR              [ reduce using rule 16 (expression -> expression ^ expression .) ]
  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 72

    (17) expression -> expression < expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    +               reduce using rule 17 (expression -> expression < expression .)
    -               reduce using rule 17 (expression -> expression < expression .)
    *               reduce using rule 17 (expression -> expression < expression .)
    /               reduce using rule 17 (expression -> expression < expression .)
    ^               reduce using rule 17 (expression -> expression < expression .)
    <               reduce using rule 17 (expression -> expression < expression .)
    >               reduce using rule 17 (expression -> expression < expression .)
    EQUAL           reduce using rule 17 (expression -> expression < expression .)
    NOTEQUAL        reduce using rule 17 (expression -> expression < expression .)
    IF              reduce using rule 17 (expression -> expression < expression .)
    BOOLEAN         reduce using rule 17 (expression -> expression < expression .)
    INTDEC          reduce using rule 17 (expression -> expression < expression .)
    FLOATDEC        reduce using rule 17 (expression -> expression < expression .)
    PRINT           reduce using rule 17 (expression -> expression < expression .)
    NAME            reduce using rule 17 (expression -> expression < expression .)
    $end            reduce using rule 17 (expression -> expression < expression .)
    }               reduce using rule 17 (expression -> expression < expression .)
    )               reduce using rule 17 (expression -> expression < expression .)
    GOEQUAL         reduce using rule 17 (expression -> expression < expression .)
    LOEQUAL         reduce using rule 17 (expression -> expression < expression .)
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! AND             [ reduce using rule 17 (expression -> expression < expression .) ]
  ! OR              [ reduce using rule 17 (expression -> expression < expression .) ]
  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 73

    (18) expression -> expression > expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    +               reduce using rule 18 (expression -> expression > expression .)
    -               reduce using rule 18 (expression -> expression > expression .)
    *               reduce using rule 18 (expression -> expression > expression .)
    /               reduce using rule 18 (expression -> expression > expression .)
    ^               reduce using rule 18 (expression -> expression > expression .)
    <               reduce using rule 18 (expression -> expression > expression .)
    >               reduce using rule 18 (expression -> expression > expression .)
    EQUAL           reduce using rule 18 (expression -> expression > expression .)
    NOTEQUAL        reduce using rule 18 (expression -> expression > expression .)
    IF              reduce using rule 18 (expression -> expression > expression .)
    BOOLEAN         reduce using rule 18 (expression -> expression > expression .)
    INTDEC          reduce using rule 18 (expression -> expression > expression .)
    FLOATDEC        reduce using rule 18 (expression -> expression > expression .)
    PRINT           reduce using rule 18 (expression -> expression > expression .)
    NAME            reduce using rule 18 (expression -> expression > expression .)
    $end            reduce using rule 18 (expression -> expression > expression .)
    }               reduce using rule 18 (expression -> expression > expression .)
    )               reduce using rule 18 (expression -> expression > expression .)
    GOEQUAL         reduce using rule 18 (expression -> expression > expression .)
    LOEQUAL         reduce using rule 18 (expression -> expression > expression .)
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! AND             [ reduce using rule 18 (expression -> expression > expression .) ]
  ! OR              [ reduce using rule 18 (expression -> expression > expression .) ]
  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]


state 74

    (19) expression -> expression EQUAL expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 19 (expression -> expression EQUAL expression .)
    BOOLEAN         reduce using rule 19 (expression -> expression EQUAL expression .)
    INTDEC          reduce using rule 19 (expression -> expression EQUAL expression .)
    FLOATDEC        reduce using rule 19 (expression -> expression EQUAL expression .)
    PRINT           reduce using rule 19 (expression -> expression EQUAL expression .)
    NAME            reduce using rule 19 (expression -> expression EQUAL expression .)
    $end            reduce using rule 19 (expression -> expression EQUAL expression .)
    }               reduce using rule 19 (expression -> expression EQUAL expression .)
    )               reduce using rule 19 (expression -> expression EQUAL expression .)
    GOEQUAL         reduce using rule 19 (expression -> expression EQUAL expression .)
    LOEQUAL         reduce using rule 19 (expression -> expression EQUAL expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! +               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! ^               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! <               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! >               [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 19 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 19 (expression -> expression EQUAL expression .) ]


state 75

    (20) expression -> expression NOTEQUAL expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IF              reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    BOOLEAN         reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    INTDEC          reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    FLOATDEC        reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    PRINT           reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    NAME            reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    $end            reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    }               reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    )               reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    GOEQUAL         reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    LOEQUAL         reduce using rule 20 (expression -> expression NOTEQUAL expression .)
    +               shift and go to state 43
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 46
    ^               shift and go to state 47
    <               shift and go to state 50
    >               shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! +               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! ^               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! <               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! >               [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression NOTEQUAL expression .) ]


state 76

    (21) expression -> expression AND expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    +               reduce using rule 21 (expression -> expression AND expression .)
    -               reduce using rule 21 (expression -> expression AND expression .)
    *               reduce using rule 21 (expression -> expression AND expression .)
    /               reduce using rule 21 (expression -> expression AND expression .)
    ^               reduce using rule 21 (expression -> expression AND expression .)
    <               reduce using rule 21 (expression -> expression AND expression .)
    >               reduce using rule 21 (expression -> expression AND expression .)
    EQUAL           reduce using rule 21 (expression -> expression AND expression .)
    NOTEQUAL        reduce using rule 21 (expression -> expression AND expression .)
    AND             reduce using rule 21 (expression -> expression AND expression .)
    OR              reduce using rule 21 (expression -> expression AND expression .)
    IF              reduce using rule 21 (expression -> expression AND expression .)
    BOOLEAN         reduce using rule 21 (expression -> expression AND expression .)
    INTDEC          reduce using rule 21 (expression -> expression AND expression .)
    FLOATDEC        reduce using rule 21 (expression -> expression AND expression .)
    PRINT           reduce using rule 21 (expression -> expression AND expression .)
    NAME            reduce using rule 21 (expression -> expression AND expression .)
    $end            reduce using rule 21 (expression -> expression AND expression .)
    }               reduce using rule 21 (expression -> expression AND expression .)
    )               reduce using rule 21 (expression -> expression AND expression .)
    GOEQUAL         reduce using rule 21 (expression -> expression AND expression .)
    LOEQUAL         reduce using rule 21 (expression -> expression AND expression .)

  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 77

    (22) expression -> expression OR expression .
    (12) expression -> expression . + expression
    (13) expression -> expression . - expression
    (14) expression -> expression . * expression
    (15) expression -> expression . / expression
    (16) expression -> expression . ^ expression
    (17) expression -> expression . < expression
    (18) expression -> expression . > expression
    (19) expression -> expression . EQUAL expression
    (20) expression -> expression . NOTEQUAL expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . OR expression

    +               reduce using rule 22 (expression -> expression OR expression .)
    -               reduce using rule 22 (expression -> expression OR expression .)
    *               reduce using rule 22 (expression -> expression OR expression .)
    /               reduce using rule 22 (expression -> expression OR expression .)
    ^               reduce using rule 22 (expression -> expression OR expression .)
    <               reduce using rule 22 (expression -> expression OR expression .)
    >               reduce using rule 22 (expression -> expression OR expression .)
    EQUAL           reduce using rule 22 (expression -> expression OR expression .)
    NOTEQUAL        reduce using rule 22 (expression -> expression OR expression .)
    AND             reduce using rule 22 (expression -> expression OR expression .)
    OR              reduce using rule 22 (expression -> expression OR expression .)
    IF              reduce using rule 22 (expression -> expression OR expression .)
    BOOLEAN         reduce using rule 22 (expression -> expression OR expression .)
    INTDEC          reduce using rule 22 (expression -> expression OR expression .)
    FLOATDEC        reduce using rule 22 (expression -> expression OR expression .)
    PRINT           reduce using rule 22 (expression -> expression OR expression .)
    NAME            reduce using rule 22 (expression -> expression OR expression .)
    $end            reduce using rule 22 (expression -> expression OR expression .)
    }               reduce using rule 22 (expression -> expression OR expression .)
    )               reduce using rule 22 (expression -> expression OR expression .)
    GOEQUAL         reduce using rule 22 (expression -> expression OR expression .)
    LOEQUAL         reduce using rule 22 (expression -> expression OR expression .)

  ! +               [ shift and go to state 43 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 46 ]
  ! ^               [ shift and go to state 47 ]
  ! <               [ shift and go to state 50 ]
  ! >               [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOTEQUAL        [ shift and go to state 53 ]
  ! AND             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]


state 78

    (37) conditional -> IF ( logic_expression ) { s . } elif else

    }               shift and go to state 79


state 79

    (37) conditional -> IF ( logic_expression ) { s } . elif else
    (38) elif -> . ELIF ( logic_expression ) { s } else
    (39) elif -> .

    ELIF            shift and go to state 81
    ELSE            reduce using rule 39 (elif -> .)
    IF              reduce using rule 39 (elif -> .)
    BOOLEAN         reduce using rule 39 (elif -> .)
    INTDEC          reduce using rule 39 (elif -> .)
    FLOATDEC        reduce using rule 39 (elif -> .)
    PRINT           reduce using rule 39 (elif -> .)
    NAME            reduce using rule 39 (elif -> .)
    $end            reduce using rule 39 (elif -> .)
    }               reduce using rule 39 (elif -> .)

    elif                           shift and go to state 80

state 80

    (37) conditional -> IF ( logic_expression ) { s } elif . else
    (40) else -> . ELSE { s }
    (41) else -> .

    ELSE            shift and go to state 83
    IF              reduce using rule 41 (else -> .)
    BOOLEAN         reduce using rule 41 (else -> .)
    INTDEC          reduce using rule 41 (else -> .)
    FLOATDEC        reduce using rule 41 (else -> .)
    PRINT           reduce using rule 41 (else -> .)
    NAME            reduce using rule 41 (else -> .)
    $end            reduce using rule 41 (else -> .)
    }               reduce using rule 41 (else -> .)

    else                           shift and go to state 82

state 81

    (38) elif -> ELIF . ( logic_expression ) { s } else

    (               shift and go to state 84


state 82

    (37) conditional -> IF ( logic_expression ) { s } elif else .

    IF              reduce using rule 37 (conditional -> IF ( logic_expression ) { s } elif else .)
    BOOLEAN         reduce using rule 37 (conditional -> IF ( logic_expression ) { s } elif else .)
    INTDEC          reduce using rule 37 (conditional -> IF ( logic_expression ) { s } elif else .)
    FLOATDEC        reduce using rule 37 (conditional -> IF ( logic_expression ) { s } elif else .)
    PRINT           reduce using rule 37 (conditional -> IF ( logic_expression ) { s } elif else .)
    NAME            reduce using rule 37 (conditional -> IF ( logic_expression ) { s } elif else .)
    $end            reduce using rule 37 (conditional -> IF ( logic_expression ) { s } elif else .)
    }               reduce using rule 37 (conditional -> IF ( logic_expression ) { s } elif else .)


state 83

    (40) else -> ELSE . { s }

    {               shift and go to state 85


state 84

    (38) elif -> ELIF ( . logic_expression ) { s } else
    (23) logic_expression -> . expression < expression
    (24) logic_expression -> . expression > expression
    (25) logic_expression -> . expression EQUAL expression
    (26) logic_expression -> . expression NOTEQUAL expression
    (27) logic_expression -> . expression GOEQUAL expression
    (28) logic_expression -> . expression LOEQUAL expression
    (29) logic_expression -> . expression AND expression
    (30) logic_expression -> . expression OR expression
    (12) expression -> . expression + expression
    (13) expression -> . expression - expression
    (14) expression -> . expression * expression
    (15) expression -> . expression / expression
    (16) expression -> . expression ^ expression
    (17) expression -> . expression < expression
    (18) expression -> . expression > expression
    (19) expression -> . expression EQUAL expression
    (20) expression -> . expression NOTEQUAL expression
    (21) expression -> . expression AND expression
    (22) expression -> . expression OR expression
    (31) expression -> . - expression
    (32) expression -> . ( expression )
    (33) expression -> . INUMBER
    (34) expression -> . FNUMBER
    (35) expression -> . TRUE
    (36) expression -> . FALSE
    (42) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 18
    INUMBER         shift and go to state 22
    FNUMBER         shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    NAME            shift and go to state 26

    logic_expression               shift and go to state 86
    expression                     shift and go to state 20

state 85

    (40) else -> ELSE { . s }
    (1) s -> . segment
    (2) s -> . segment s
    (3) segment -> . conditional
    (4) segment -> . statement
    (37) conditional -> . IF ( logic_expression ) { s } elif else
    (5) statement -> . BOOLEAN NAME is_assign
    (6) statement -> . INTDEC NAME is_assign
    (7) statement -> . FLOATDEC NAME is_assign
    (10) statement -> . PRINT ( expression )
    (11) statement -> . NAME = expression

    IF              shift and go to state 5
    BOOLEAN         shift and go to state 6
    INTDEC          shift and go to state 8
    FLOATDEC        shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 7

    s                              shift and go to state 87
    segment                        shift and go to state 2
    conditional                    shift and go to state 3
    statement                      shift and go to state 4

state 86

    (38) elif -> ELIF ( logic_expression . ) { s } else

    )               shift and go to state 88


state 87

    (40) else -> ELSE { s . }

    }               shift and go to state 89


state 88

    (38) elif -> ELIF ( logic_expression ) . { s } else

    {               shift and go to state 90


state 89

    (40) else -> ELSE { s } .

    IF              reduce using rule 40 (else -> ELSE { s } .)
    BOOLEAN         reduce using rule 40 (else -> ELSE { s } .)
    INTDEC          reduce using rule 40 (else -> ELSE { s } .)
    FLOATDEC        reduce using rule 40 (else -> ELSE { s } .)
    PRINT           reduce using rule 40 (else -> ELSE { s } .)
    NAME            reduce using rule 40 (else -> ELSE { s } .)
    $end            reduce using rule 40 (else -> ELSE { s } .)
    }               reduce using rule 40 (else -> ELSE { s } .)
    ELSE            reduce using rule 40 (else -> ELSE { s } .)


state 90

    (38) elif -> ELIF ( logic_expression ) { . s } else
    (1) s -> . segment
    (2) s -> . segment s
    (3) segment -> . conditional
    (4) segment -> . statement
    (37) conditional -> . IF ( logic_expression ) { s } elif else
    (5) statement -> . BOOLEAN NAME is_assign
    (6) statement -> . INTDEC NAME is_assign
    (7) statement -> . FLOATDEC NAME is_assign
    (10) statement -> . PRINT ( expression )
    (11) statement -> . NAME = expression

    IF              shift and go to state 5
    BOOLEAN         shift and go to state 6
    INTDEC          shift and go to state 8
    FLOATDEC        shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 7

    s                              shift and go to state 91
    segment                        shift and go to state 2
    conditional                    shift and go to state 3
    statement                      shift and go to state 4

state 91

    (38) elif -> ELIF ( logic_expression ) { s . } else

    }               shift and go to state 92


state 92

    (38) elif -> ELIF ( logic_expression ) { s } . else
    (40) else -> . ELSE { s }
    (41) else -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 83
    IF              reduce using rule 41 (else -> .)
    BOOLEAN         reduce using rule 41 (else -> .)
    INTDEC          reduce using rule 41 (else -> .)
    FLOATDEC        reduce using rule 41 (else -> .)
    PRINT           reduce using rule 41 (else -> .)
    NAME            reduce using rule 41 (else -> .)
    $end            reduce using rule 41 (else -> .)
    }               reduce using rule 41 (else -> .)

  ! ELSE            [ reduce using rule 41 (else -> .) ]

    else                           shift and go to state 93

state 93

    (38) elif -> ELIF ( logic_expression ) { s } else .

    ELSE            reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)
    IF              reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)
    BOOLEAN         reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)
    INTDEC          reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)
    FLOATDEC        reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)
    PRINT           reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)
    NAME            reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)
    $end            reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)
    }               reduce using rule 38 (elif -> ELIF ( logic_expression ) { s } else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 61 resolved as shift
WARNING: shift/reduce conflict for - in state 61 resolved as shift
WARNING: shift/reduce conflict for * in state 61 resolved as shift
WARNING: shift/reduce conflict for / in state 61 resolved as shift
WARNING: shift/reduce conflict for ^ in state 61 resolved as shift
WARNING: shift/reduce conflict for < in state 61 resolved as shift
WARNING: shift/reduce conflict for > in state 61 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: shift/reduce conflict for + in state 62 resolved as shift
WARNING: shift/reduce conflict for - in state 62 resolved as shift
WARNING: shift/reduce conflict for * in state 62 resolved as shift
WARNING: shift/reduce conflict for / in state 62 resolved as shift
WARNING: shift/reduce conflict for ^ in state 62 resolved as shift
WARNING: shift/reduce conflict for < in state 62 resolved as shift
WARNING: shift/reduce conflict for > in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for + in state 74 resolved as shift
WARNING: shift/reduce conflict for - in state 74 resolved as shift
WARNING: shift/reduce conflict for * in state 74 resolved as shift
WARNING: shift/reduce conflict for / in state 74 resolved as shift
WARNING: shift/reduce conflict for ^ in state 74 resolved as shift
WARNING: shift/reduce conflict for < in state 74 resolved as shift
WARNING: shift/reduce conflict for > in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for + in state 75 resolved as shift
WARNING: shift/reduce conflict for - in state 75 resolved as shift
WARNING: shift/reduce conflict for * in state 75 resolved as shift
WARNING: shift/reduce conflict for / in state 75 resolved as shift
WARNING: shift/reduce conflict for ^ in state 75 resolved as shift
WARNING: shift/reduce conflict for < in state 75 resolved as shift
WARNING: shift/reduce conflict for > in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 92 resolved as shift
