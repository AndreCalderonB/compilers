Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    GOEQUAL
    LOEQUAL
    OR

Grammar

Rule 0     S' -> statement
Rule 1     statement -> BOOLEAN NAME is_assign
Rule 2     statement -> INTDEC NAME is_assign
Rule 3     statement -> FLOATDEC NAME is_assign
Rule 4     is_assign -> = expression
Rule 5     is_assign -> <empty>
Rule 6     statement -> PRINT ( expression )
Rule 7     statement -> NAME = expression
Rule 8     expression -> expression + expression
Rule 9     expression -> expression - expression
Rule 10    expression -> expression * expression
Rule 11    expression -> expression / expression
Rule 12    expression -> expression ^ expression
Rule 13    expression -> expression < expression
Rule 14    expression -> expression > expression
Rule 15    expression -> expression EQUAL expression
Rule 16    expression -> expression NOTEQUAL expression
Rule 17    expression -> expression AND expression
Rule 18    expression -> - expression
Rule 19    expression -> ( expression )
Rule 20    expression -> INUMBER
Rule 21    expression -> FNUMBER
Rule 22    expression -> TRUE
Rule 23    expression -> FALSE
Rule 24    statement -> if elif else
Rule 25    if -> IF ( expression ) { statement }
Rule 26    elif -> ELIF ( expression ) { statement } elif
Rule 27    elif -> <empty>
Rule 28    else -> ELSE { statement }
Rule 29    else -> <empty>
Rule 30    expression -> NAME

Terminals, with rules where they appear

(                    : 6 19 25 26
)                    : 6 19 25 26
*                    : 10
+                    : 8
-                    : 9 18
/                    : 11
<                    : 13
=                    : 4 7
>                    : 14
AND                  : 17
BOOLEAN              : 1
ELIF                 : 26
ELSE                 : 28
EQUAL                : 15
FALSE                : 23
FLOATDEC             : 3
FNUMBER              : 21
GOEQUAL              : 
IF                   : 25
INTDEC               : 2
INUMBER              : 20
LOEQUAL              : 
NAME                 : 1 2 3 7 30
NOTEQUAL             : 16
OR                   : 
PRINT                : 6
TRUE                 : 22
^                    : 12
error                : 
{                    : 25 26 28
}                    : 25 26 28

Nonterminals, with rules where they appear

elif                 : 24 26
else                 : 24
expression           : 4 6 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 19 25 26
if                   : 24
is_assign            : 1 2 3
statement            : 25 26 28 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . BOOLEAN NAME is_assign
    (2) statement -> . INTDEC NAME is_assign
    (3) statement -> . FLOATDEC NAME is_assign
    (6) statement -> . PRINT ( expression )
    (7) statement -> . NAME = expression
    (24) statement -> . if elif else
    (25) if -> . IF ( expression ) { statement }

    BOOLEAN         shift and go to state 2
    INTDEC          shift and go to state 4
    FLOATDEC        shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 3
    IF              shift and go to state 8

    statement                      shift and go to state 1
    if                             shift and go to state 7

state 1

    (0) S' -> statement .



state 2

    (1) statement -> BOOLEAN . NAME is_assign

    NAME            shift and go to state 9


state 3

    (7) statement -> NAME . = expression

    =               shift and go to state 10


state 4

    (2) statement -> INTDEC . NAME is_assign

    NAME            shift and go to state 11


state 5

    (3) statement -> FLOATDEC . NAME is_assign

    NAME            shift and go to state 12


state 6

    (6) statement -> PRINT . ( expression )

    (               shift and go to state 13


state 7

    (24) statement -> if . elif else
    (26) elif -> . ELIF ( expression ) { statement } elif
    (27) elif -> .

    ELIF            shift and go to state 15
    ELSE            reduce using rule 27 (elif -> .)
    $end            reduce using rule 27 (elif -> .)
    }               reduce using rule 27 (elif -> .)

    elif                           shift and go to state 14

state 8

    (25) if -> IF . ( expression ) { statement }

    (               shift and go to state 16


state 9

    (1) statement -> BOOLEAN NAME . is_assign
    (4) is_assign -> . = expression
    (5) is_assign -> .

    =               shift and go to state 18
    $end            reduce using rule 5 (is_assign -> .)
    }               reduce using rule 5 (is_assign -> .)

    is_assign                      shift and go to state 17

state 10

    (7) statement -> NAME = . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 20

state 11

    (2) statement -> INTDEC NAME . is_assign
    (4) is_assign -> . = expression
    (5) is_assign -> .

    =               shift and go to state 18
    $end            reduce using rule 5 (is_assign -> .)
    }               reduce using rule 5 (is_assign -> .)

    is_assign                      shift and go to state 27

state 12

    (3) statement -> FLOATDEC NAME . is_assign
    (4) is_assign -> . = expression
    (5) is_assign -> .

    =               shift and go to state 18
    $end            reduce using rule 5 (is_assign -> .)
    }               reduce using rule 5 (is_assign -> .)

    is_assign                      shift and go to state 28

state 13

    (6) statement -> PRINT ( . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 29

state 14

    (24) statement -> if elif . else
    (28) else -> . ELSE { statement }
    (29) else -> .

    ELSE            shift and go to state 31
    $end            reduce using rule 29 (else -> .)
    }               reduce using rule 29 (else -> .)

    else                           shift and go to state 30

state 15

    (26) elif -> ELIF . ( expression ) { statement } elif

    (               shift and go to state 32


state 16

    (25) if -> IF ( . expression ) { statement }
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 33

state 17

    (1) statement -> BOOLEAN NAME is_assign .

    $end            reduce using rule 1 (statement -> BOOLEAN NAME is_assign .)
    }               reduce using rule 1 (statement -> BOOLEAN NAME is_assign .)


state 18

    (4) is_assign -> = . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 34

state 19

    (30) expression -> NAME .

    +               reduce using rule 30 (expression -> NAME .)
    -               reduce using rule 30 (expression -> NAME .)
    *               reduce using rule 30 (expression -> NAME .)
    /               reduce using rule 30 (expression -> NAME .)
    ^               reduce using rule 30 (expression -> NAME .)
    <               reduce using rule 30 (expression -> NAME .)
    >               reduce using rule 30 (expression -> NAME .)
    EQUAL           reduce using rule 30 (expression -> NAME .)
    NOTEQUAL        reduce using rule 30 (expression -> NAME .)
    AND             reduce using rule 30 (expression -> NAME .)
    $end            reduce using rule 30 (expression -> NAME .)
    }               reduce using rule 30 (expression -> NAME .)
    )               reduce using rule 30 (expression -> NAME .)


state 20

    (7) statement -> NAME = expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    $end            reduce using rule 7 (statement -> NAME = expression .)
    }               reduce using rule 7 (statement -> NAME = expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    EQUAL           shift and go to state 42
    NOTEQUAL        shift and go to state 43
    AND             shift and go to state 44


state 21

    (18) expression -> - . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 45

state 22

    (19) expression -> ( . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 46

state 23

    (20) expression -> INUMBER .

    +               reduce using rule 20 (expression -> INUMBER .)
    -               reduce using rule 20 (expression -> INUMBER .)
    *               reduce using rule 20 (expression -> INUMBER .)
    /               reduce using rule 20 (expression -> INUMBER .)
    ^               reduce using rule 20 (expression -> INUMBER .)
    <               reduce using rule 20 (expression -> INUMBER .)
    >               reduce using rule 20 (expression -> INUMBER .)
    EQUAL           reduce using rule 20 (expression -> INUMBER .)
    NOTEQUAL        reduce using rule 20 (expression -> INUMBER .)
    AND             reduce using rule 20 (expression -> INUMBER .)
    $end            reduce using rule 20 (expression -> INUMBER .)
    }               reduce using rule 20 (expression -> INUMBER .)
    )               reduce using rule 20 (expression -> INUMBER .)


state 24

    (21) expression -> FNUMBER .

    +               reduce using rule 21 (expression -> FNUMBER .)
    -               reduce using rule 21 (expression -> FNUMBER .)
    *               reduce using rule 21 (expression -> FNUMBER .)
    /               reduce using rule 21 (expression -> FNUMBER .)
    ^               reduce using rule 21 (expression -> FNUMBER .)
    <               reduce using rule 21 (expression -> FNUMBER .)
    >               reduce using rule 21 (expression -> FNUMBER .)
    EQUAL           reduce using rule 21 (expression -> FNUMBER .)
    NOTEQUAL        reduce using rule 21 (expression -> FNUMBER .)
    AND             reduce using rule 21 (expression -> FNUMBER .)
    $end            reduce using rule 21 (expression -> FNUMBER .)
    }               reduce using rule 21 (expression -> FNUMBER .)
    )               reduce using rule 21 (expression -> FNUMBER .)


state 25

    (22) expression -> TRUE .

    +               reduce using rule 22 (expression -> TRUE .)
    -               reduce using rule 22 (expression -> TRUE .)
    *               reduce using rule 22 (expression -> TRUE .)
    /               reduce using rule 22 (expression -> TRUE .)
    ^               reduce using rule 22 (expression -> TRUE .)
    <               reduce using rule 22 (expression -> TRUE .)
    >               reduce using rule 22 (expression -> TRUE .)
    EQUAL           reduce using rule 22 (expression -> TRUE .)
    NOTEQUAL        reduce using rule 22 (expression -> TRUE .)
    AND             reduce using rule 22 (expression -> TRUE .)
    $end            reduce using rule 22 (expression -> TRUE .)
    }               reduce using rule 22 (expression -> TRUE .)
    )               reduce using rule 22 (expression -> TRUE .)


state 26

    (23) expression -> FALSE .

    +               reduce using rule 23 (expression -> FALSE .)
    -               reduce using rule 23 (expression -> FALSE .)
    *               reduce using rule 23 (expression -> FALSE .)
    /               reduce using rule 23 (expression -> FALSE .)
    ^               reduce using rule 23 (expression -> FALSE .)
    <               reduce using rule 23 (expression -> FALSE .)
    >               reduce using rule 23 (expression -> FALSE .)
    EQUAL           reduce using rule 23 (expression -> FALSE .)
    NOTEQUAL        reduce using rule 23 (expression -> FALSE .)
    AND             reduce using rule 23 (expression -> FALSE .)
    $end            reduce using rule 23 (expression -> FALSE .)
    }               reduce using rule 23 (expression -> FALSE .)
    )               reduce using rule 23 (expression -> FALSE .)


state 27

    (2) statement -> INTDEC NAME is_assign .

    $end            reduce using rule 2 (statement -> INTDEC NAME is_assign .)
    }               reduce using rule 2 (statement -> INTDEC NAME is_assign .)


state 28

    (3) statement -> FLOATDEC NAME is_assign .

    $end            reduce using rule 3 (statement -> FLOATDEC NAME is_assign .)
    }               reduce using rule 3 (statement -> FLOATDEC NAME is_assign .)


state 29

    (6) statement -> PRINT ( expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    )               shift and go to state 47
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    EQUAL           shift and go to state 42
    NOTEQUAL        shift and go to state 43
    AND             shift and go to state 44


state 30

    (24) statement -> if elif else .

    $end            reduce using rule 24 (statement -> if elif else .)
    }               reduce using rule 24 (statement -> if elif else .)


state 31

    (28) else -> ELSE . { statement }

    {               shift and go to state 48


state 32

    (26) elif -> ELIF ( . expression ) { statement } elif
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 49

state 33

    (25) if -> IF ( expression . ) { statement }
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    )               shift and go to state 50
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    EQUAL           shift and go to state 42
    NOTEQUAL        shift and go to state 43
    AND             shift and go to state 44


state 34

    (4) is_assign -> = expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    $end            reduce using rule 4 (is_assign -> = expression .)
    }               reduce using rule 4 (is_assign -> = expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    EQUAL           shift and go to state 42
    NOTEQUAL        shift and go to state 43
    AND             shift and go to state 44


state 35

    (8) expression -> expression + . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 51

state 36

    (9) expression -> expression - . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 52

state 37

    (10) expression -> expression * . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 53

state 38

    (11) expression -> expression / . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 54

state 39

    (12) expression -> expression ^ . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 55

state 40

    (13) expression -> expression < . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 56

state 41

    (14) expression -> expression > . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 57

state 42

    (15) expression -> expression EQUAL . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 58

state 43

    (16) expression -> expression NOTEQUAL . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 59

state 44

    (17) expression -> expression AND . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . expression ^ expression
    (13) expression -> . expression < expression
    (14) expression -> . expression > expression
    (15) expression -> . expression EQUAL expression
    (16) expression -> . expression NOTEQUAL expression
    (17) expression -> . expression AND expression
    (18) expression -> . - expression
    (19) expression -> . ( expression )
    (20) expression -> . INUMBER
    (21) expression -> . FNUMBER
    (22) expression -> . TRUE
    (23) expression -> . FALSE
    (30) expression -> . NAME

    -               shift and go to state 21
    (               shift and go to state 22
    INUMBER         shift and go to state 23
    FNUMBER         shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    NAME            shift and go to state 19

    expression                     shift and go to state 60

state 45

    (18) expression -> - expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    +               reduce using rule 18 (expression -> - expression .)
    -               reduce using rule 18 (expression -> - expression .)
    *               reduce using rule 18 (expression -> - expression .)
    /               reduce using rule 18 (expression -> - expression .)
    ^               reduce using rule 18 (expression -> - expression .)
    <               reduce using rule 18 (expression -> - expression .)
    >               reduce using rule 18 (expression -> - expression .)
    EQUAL           reduce using rule 18 (expression -> - expression .)
    NOTEQUAL        reduce using rule 18 (expression -> - expression .)
    AND             reduce using rule 18 (expression -> - expression .)
    $end            reduce using rule 18 (expression -> - expression .)
    }               reduce using rule 18 (expression -> - expression .)
    )               reduce using rule 18 (expression -> - expression .)

  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! ^               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 46

    (19) expression -> ( expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    )               shift and go to state 61
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    EQUAL           shift and go to state 42
    NOTEQUAL        shift and go to state 43
    AND             shift and go to state 44


state 47

    (6) statement -> PRINT ( expression ) .

    $end            reduce using rule 6 (statement -> PRINT ( expression ) .)
    }               reduce using rule 6 (statement -> PRINT ( expression ) .)


state 48

    (28) else -> ELSE { . statement }
    (1) statement -> . BOOLEAN NAME is_assign
    (2) statement -> . INTDEC NAME is_assign
    (3) statement -> . FLOATDEC NAME is_assign
    (6) statement -> . PRINT ( expression )
    (7) statement -> . NAME = expression
    (24) statement -> . if elif else
    (25) if -> . IF ( expression ) { statement }

    BOOLEAN         shift and go to state 2
    INTDEC          shift and go to state 4
    FLOATDEC        shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 3
    IF              shift and go to state 8

    statement                      shift and go to state 62
    if                             shift and go to state 7

state 49

    (26) elif -> ELIF ( expression . ) { statement } elif
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    )               shift and go to state 63
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    EQUAL           shift and go to state 42
    NOTEQUAL        shift and go to state 43
    AND             shift and go to state 44


state 50

    (25) if -> IF ( expression ) . { statement }

    {               shift and go to state 64


state 51

    (8) expression -> expression + expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    +               reduce using rule 8 (expression -> expression + expression .)
    -               reduce using rule 8 (expression -> expression + expression .)
    *               reduce using rule 8 (expression -> expression + expression .)
    /               reduce using rule 8 (expression -> expression + expression .)
    EQUAL           reduce using rule 8 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 8 (expression -> expression + expression .)
    $end            reduce using rule 8 (expression -> expression + expression .)
    }               reduce using rule 8 (expression -> expression + expression .)
    )               reduce using rule 8 (expression -> expression + expression .)
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    AND             shift and go to state 44

  ! ^               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! <               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! >               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! AND             [ reduce using rule 8 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]


state 52

    (9) expression -> expression - expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    +               reduce using rule 9 (expression -> expression - expression .)
    -               reduce using rule 9 (expression -> expression - expression .)
    *               reduce using rule 9 (expression -> expression - expression .)
    /               reduce using rule 9 (expression -> expression - expression .)
    EQUAL           reduce using rule 9 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 9 (expression -> expression - expression .)
    $end            reduce using rule 9 (expression -> expression - expression .)
    }               reduce using rule 9 (expression -> expression - expression .)
    )               reduce using rule 9 (expression -> expression - expression .)
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    AND             shift and go to state 44

  ! ^               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! >               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! AND             [ reduce using rule 9 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]


state 53

    (10) expression -> expression * expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    *               reduce using rule 10 (expression -> expression * expression .)
    /               reduce using rule 10 (expression -> expression * expression .)
    EQUAL           reduce using rule 10 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 10 (expression -> expression * expression .)
    $end            reduce using rule 10 (expression -> expression * expression .)
    }               reduce using rule 10 (expression -> expression * expression .)
    )               reduce using rule 10 (expression -> expression * expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    AND             shift and go to state 44

  ! +               [ reduce using rule 10 (expression -> expression * expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression * expression .) ]
  ! ^               [ reduce using rule 10 (expression -> expression * expression .) ]
  ! <               [ reduce using rule 10 (expression -> expression * expression .) ]
  ! >               [ reduce using rule 10 (expression -> expression * expression .) ]
  ! AND             [ reduce using rule 10 (expression -> expression * expression .) ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]


state 54

    (11) expression -> expression / expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    *               reduce using rule 11 (expression -> expression / expression .)
    /               reduce using rule 11 (expression -> expression / expression .)
    EQUAL           reduce using rule 11 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 11 (expression -> expression / expression .)
    $end            reduce using rule 11 (expression -> expression / expression .)
    }               reduce using rule 11 (expression -> expression / expression .)
    )               reduce using rule 11 (expression -> expression / expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    AND             shift and go to state 44

  ! +               [ reduce using rule 11 (expression -> expression / expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression / expression .) ]
  ! ^               [ reduce using rule 11 (expression -> expression / expression .) ]
  ! <               [ reduce using rule 11 (expression -> expression / expression .) ]
  ! >               [ reduce using rule 11 (expression -> expression / expression .) ]
  ! AND             [ reduce using rule 11 (expression -> expression / expression .) ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]


state 55

    (12) expression -> expression ^ expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    +               reduce using rule 12 (expression -> expression ^ expression .)
    -               reduce using rule 12 (expression -> expression ^ expression .)
    *               reduce using rule 12 (expression -> expression ^ expression .)
    /               reduce using rule 12 (expression -> expression ^ expression .)
    ^               reduce using rule 12 (expression -> expression ^ expression .)
    EQUAL           reduce using rule 12 (expression -> expression ^ expression .)
    NOTEQUAL        reduce using rule 12 (expression -> expression ^ expression .)
    $end            reduce using rule 12 (expression -> expression ^ expression .)
    }               reduce using rule 12 (expression -> expression ^ expression .)
    )               reduce using rule 12 (expression -> expression ^ expression .)
    <               shift and go to state 40
    >               shift and go to state 41
    AND             shift and go to state 44

  ! <               [ reduce using rule 12 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 12 (expression -> expression ^ expression .) ]
  ! AND             [ reduce using rule 12 (expression -> expression ^ expression .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! ^               [ shift and go to state 39 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]


state 56

    (13) expression -> expression < expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    +               reduce using rule 13 (expression -> expression < expression .)
    -               reduce using rule 13 (expression -> expression < expression .)
    *               reduce using rule 13 (expression -> expression < expression .)
    /               reduce using rule 13 (expression -> expression < expression .)
    ^               reduce using rule 13 (expression -> expression < expression .)
    <               reduce using rule 13 (expression -> expression < expression .)
    >               reduce using rule 13 (expression -> expression < expression .)
    EQUAL           reduce using rule 13 (expression -> expression < expression .)
    NOTEQUAL        reduce using rule 13 (expression -> expression < expression .)
    $end            reduce using rule 13 (expression -> expression < expression .)
    }               reduce using rule 13 (expression -> expression < expression .)
    )               reduce using rule 13 (expression -> expression < expression .)
    AND             shift and go to state 44

  ! AND             [ reduce using rule 13 (expression -> expression < expression .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! ^               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]


state 57

    (14) expression -> expression > expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    +               reduce using rule 14 (expression -> expression > expression .)
    -               reduce using rule 14 (expression -> expression > expression .)
    *               reduce using rule 14 (expression -> expression > expression .)
    /               reduce using rule 14 (expression -> expression > expression .)
    ^               reduce using rule 14 (expression -> expression > expression .)
    <               reduce using rule 14 (expression -> expression > expression .)
    >               reduce using rule 14 (expression -> expression > expression .)
    EQUAL           reduce using rule 14 (expression -> expression > expression .)
    NOTEQUAL        reduce using rule 14 (expression -> expression > expression .)
    $end            reduce using rule 14 (expression -> expression > expression .)
    }               reduce using rule 14 (expression -> expression > expression .)
    )               reduce using rule 14 (expression -> expression > expression .)
    AND             shift and go to state 44

  ! AND             [ reduce using rule 14 (expression -> expression > expression .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! ^               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]


state 58

    (15) expression -> expression EQUAL expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    $end            reduce using rule 15 (expression -> expression EQUAL expression .)
    }               reduce using rule 15 (expression -> expression EQUAL expression .)
    )               reduce using rule 15 (expression -> expression EQUAL expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    EQUAL           shift and go to state 42
    NOTEQUAL        shift and go to state 43
    AND             shift and go to state 44

  ! +               [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! ^               [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! <               [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! >               [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 15 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 15 (expression -> expression EQUAL expression .) ]


state 59

    (16) expression -> expression NOTEQUAL expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    $end            reduce using rule 16 (expression -> expression NOTEQUAL expression .)
    }               reduce using rule 16 (expression -> expression NOTEQUAL expression .)
    )               reduce using rule 16 (expression -> expression NOTEQUAL expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    ^               shift and go to state 39
    <               shift and go to state 40
    >               shift and go to state 41
    EQUAL           shift and go to state 42
    NOTEQUAL        shift and go to state 43
    AND             shift and go to state 44

  ! +               [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! ^               [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! >               [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 16 (expression -> expression NOTEQUAL expression .) ]


state 60

    (17) expression -> expression AND expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression
    (12) expression -> expression . ^ expression
    (13) expression -> expression . < expression
    (14) expression -> expression . > expression
    (15) expression -> expression . EQUAL expression
    (16) expression -> expression . NOTEQUAL expression
    (17) expression -> expression . AND expression

    +               reduce using rule 17 (expression -> expression AND expression .)
    -               reduce using rule 17 (expression -> expression AND expression .)
    *               reduce using rule 17 (expression -> expression AND expression .)
    /               reduce using rule 17 (expression -> expression AND expression .)
    ^               reduce using rule 17 (expression -> expression AND expression .)
    <               reduce using rule 17 (expression -> expression AND expression .)
    >               reduce using rule 17 (expression -> expression AND expression .)
    EQUAL           reduce using rule 17 (expression -> expression AND expression .)
    NOTEQUAL        reduce using rule 17 (expression -> expression AND expression .)
    AND             reduce using rule 17 (expression -> expression AND expression .)
    $end            reduce using rule 17 (expression -> expression AND expression .)
    }               reduce using rule 17 (expression -> expression AND expression .)
    )               reduce using rule 17 (expression -> expression AND expression .)

  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! ^               [ shift and go to state 39 ]
  ! <               [ shift and go to state 40 ]
  ! >               [ shift and go to state 41 ]
  ! EQUAL           [ shift and go to state 42 ]
  ! NOTEQUAL        [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 61

    (19) expression -> ( expression ) .

    +               reduce using rule 19 (expression -> ( expression ) .)
    -               reduce using rule 19 (expression -> ( expression ) .)
    *               reduce using rule 19 (expression -> ( expression ) .)
    /               reduce using rule 19 (expression -> ( expression ) .)
    ^               reduce using rule 19 (expression -> ( expression ) .)
    <               reduce using rule 19 (expression -> ( expression ) .)
    >               reduce using rule 19 (expression -> ( expression ) .)
    EQUAL           reduce using rule 19 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 19 (expression -> ( expression ) .)
    AND             reduce using rule 19 (expression -> ( expression ) .)
    $end            reduce using rule 19 (expression -> ( expression ) .)
    }               reduce using rule 19 (expression -> ( expression ) .)
    )               reduce using rule 19 (expression -> ( expression ) .)


state 62

    (28) else -> ELSE { statement . }

    }               shift and go to state 65


state 63

    (26) elif -> ELIF ( expression ) . { statement } elif

    {               shift and go to state 66


state 64

    (25) if -> IF ( expression ) { . statement }
    (1) statement -> . BOOLEAN NAME is_assign
    (2) statement -> . INTDEC NAME is_assign
    (3) statement -> . FLOATDEC NAME is_assign
    (6) statement -> . PRINT ( expression )
    (7) statement -> . NAME = expression
    (24) statement -> . if elif else
    (25) if -> . IF ( expression ) { statement }

    BOOLEAN         shift and go to state 2
    INTDEC          shift and go to state 4
    FLOATDEC        shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 3
    IF              shift and go to state 8

    statement                      shift and go to state 67
    if                             shift and go to state 7

state 65

    (28) else -> ELSE { statement } .

    $end            reduce using rule 28 (else -> ELSE { statement } .)
    }               reduce using rule 28 (else -> ELSE { statement } .)


state 66

    (26) elif -> ELIF ( expression ) { . statement } elif
    (1) statement -> . BOOLEAN NAME is_assign
    (2) statement -> . INTDEC NAME is_assign
    (3) statement -> . FLOATDEC NAME is_assign
    (6) statement -> . PRINT ( expression )
    (7) statement -> . NAME = expression
    (24) statement -> . if elif else
    (25) if -> . IF ( expression ) { statement }

    BOOLEAN         shift and go to state 2
    INTDEC          shift and go to state 4
    FLOATDEC        shift and go to state 5
    PRINT           shift and go to state 6
    NAME            shift and go to state 3
    IF              shift and go to state 8

    statement                      shift and go to state 68
    if                             shift and go to state 7

state 67

    (25) if -> IF ( expression ) { statement . }

    }               shift and go to state 69


state 68

    (26) elif -> ELIF ( expression ) { statement . } elif

    }               shift and go to state 70


state 69

    (25) if -> IF ( expression ) { statement } .

    ELIF            reduce using rule 25 (if -> IF ( expression ) { statement } .)
    ELSE            reduce using rule 25 (if -> IF ( expression ) { statement } .)
    $end            reduce using rule 25 (if -> IF ( expression ) { statement } .)
    }               reduce using rule 25 (if -> IF ( expression ) { statement } .)


state 70

    (26) elif -> ELIF ( expression ) { statement } . elif
    (26) elif -> . ELIF ( expression ) { statement } elif
    (27) elif -> .

    ELIF            shift and go to state 15
    ELSE            reduce using rule 27 (elif -> .)
    $end            reduce using rule 27 (elif -> .)
    }               reduce using rule 27 (elif -> .)

    elif                           shift and go to state 71

state 71

    (26) elif -> ELIF ( expression ) { statement } elif .

    ELSE            reduce using rule 26 (elif -> ELIF ( expression ) { statement } elif .)
    $end            reduce using rule 26 (elif -> ELIF ( expression ) { statement } elif .)
    }               reduce using rule 26 (elif -> ELIF ( expression ) { statement } elif .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 58 resolved as shift
WARNING: shift/reduce conflict for - in state 58 resolved as shift
WARNING: shift/reduce conflict for * in state 58 resolved as shift
WARNING: shift/reduce conflict for / in state 58 resolved as shift
WARNING: shift/reduce conflict for ^ in state 58 resolved as shift
WARNING: shift/reduce conflict for < in state 58 resolved as shift
WARNING: shift/reduce conflict for > in state 58 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 58 resolved as shift
WARNING: shift/reduce conflict for + in state 59 resolved as shift
WARNING: shift/reduce conflict for - in state 59 resolved as shift
WARNING: shift/reduce conflict for * in state 59 resolved as shift
WARNING: shift/reduce conflict for / in state 59 resolved as shift
WARNING: shift/reduce conflict for ^ in state 59 resolved as shift
WARNING: shift/reduce conflict for < in state 59 resolved as shift
WARNING: shift/reduce conflict for > in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
